var search_data = {
    'index': {
        'searchIndex': ["","bolt","bolt\\browser","bolt\\browser\\assets","bolt\\browser\\controller","bolt\\browser\\middleware","bolt\\browser\\response","bolt\\browser\\response\\format","bolt\\browser\\router","bolt\\browser\\views","bolt\\cli","bolt\\client","bolt\\dom","bolt\\events","bolt\\exceptions","bolt\\helpers","bolt\\helpers\\events","bolt\\helpers\\fs","bolt\\models","bolt\\models\\types","bolt\\plugin","bolt\\render","bolt\\render\\xml","bolt\\source","bolt\\source\\curl","b","bolt","bolt\\application","bolt\\base","bolt\\browser","bolt\\browser\\assets","bolt\\browser\\assets\\group","bolt\\browser\\controller","bolt\\browser\\controller\\closure","bolt\\browser\\controller\\route","bolt\\browser\\middleware","bolt\\browser\\middleware\\assets","bolt\\browser\\middleware\\closure","bolt\\browser\\middleware\\direct","bolt\\browser\\request","bolt\\browser\\response","bolt\\browser\\response\\format","bolt\\browser\\response\\format\\face","bolt\\browser\\response\\format\\html","bolt\\browser\\response\\format\\json","bolt\\browser\\response\\format\\xhr","bolt\\browser\\response\\format\\xml","bolt\\browser\\response\\redirect","bolt\\browser\\router","bolt\\browser\\router\\collection","bolt\\browser\\router\\face","bolt\\browser\\router\\route","bolt\\browser\\views","bolt\\browser\\views\\compiled","bolt\\browser\\views\\face","bolt\\browser\\views\\file","bolt\\cli","bolt\\cli\\command","bolt\\client","bolt\\client\\build","bolt\\client\\command","bolt\\client\\compile","bolt\\client\\deploy","bolt\\config","bolt\\dom","bolt\\dom\\element","bolt\\dom\\fragment","bolt\\dom\\nodelist","bolt\\exceptions\\resourcenotfoundexception","bolt\\helpers\\base","bolt\\helpers\\classes","bolt\\helpers\\collection","bolt\\helpers\\events","bolt\\helpers\\events\\event","bolt\\helpers\\events\\listener","bolt\\helpers\\fs","bolt\\helpers\\fs\\file","bolt\\helpers\\fs\\glob","bolt\\helpers\\fs\\rdir","bolt\\models","bolt\\models\\collection","bolt\\models\\driver","bolt\\models\\entity","bolt\\models\\proxy","bolt\\models\\types\\stringarray","bolt\\models\\types\\timestamp","bolt\\plugin","bolt\\plugin\\factory","bolt\\plugin\\singleton","bolt\\render","bolt\\render\\base","bolt\\render\\dom","bolt\\render\\handlebars","bolt\\render\\xml","bolt\\render\\xml\\generate","bolt\\source\\curl","bolt\\source\\curl\\repository","bolt\\source\\database","bolt\\source\\face","bolt::instance","bolt::__callstatic","bolt::init","bolt\\application::__construct","bolt\\application::autoload","bolt\\application::getbootstrapdir","bolt\\application::bootstrap","bolt\\application::getautoload","bolt\\application::env","bolt\\application::hasrun","bolt\\application::getroot","bolt\\application::setroot","bolt\\application::path","bolt\\application::load","bolt\\application::getcomposerfile","bolt\\application::run","bolt\\base::__construct","bolt\\base::app","bolt\\base::env","bolt\\base::guid","bolt\\base::__call","bolt\\base::helpers","bolt\\base::gethelpers","bolt\\base::exepction","bolt\\browser::start","bolt\\browser::__construct","bolt\\browser::__get","bolt\\browser::__call","bolt\\browser::getapp","bolt\\browser::getrequest","bolt\\browser::setrequest","bolt\\browser::getresponse","bolt\\browser::setresponse","bolt\\browser::path","bolt\\browser::load","bolt\\browser::bind","bolt\\browser::getmiddleware","bolt\\browser::run","bolt\\browser::execute","bolt\\browser::runmiddleware","bolt\\browser::runmiddlewarebyname","bolt\\browser\\assets::__construct","bolt\\browser\\assets::globals","bolt\\browser\\assets::filter","bolt\\browser\\assets::add","bolt\\browser\\assets::creategroup","bolt\\browser\\assets::find","bolt\\browser\\assets::finddir","bolt\\browser\\assets::out","bolt\\browser\\assets::url","bolt\\browser\\assets::getgroup","bolt\\browser\\assets::stylesheet","bolt\\browser\\assets::getglobals","bolt\\browser\\assets::getfilters","bolt\\browser\\assets::compile","bolt\\browser\\assets::compilefile","bolt\\browser\\assets\\group::__construct","bolt\\browser\\assets\\group::gettype","bolt\\browser\\assets\\group::getname","bolt\\browser\\assets\\group::add","bolt\\browser\\assets\\group::getcombourl","bolt\\browser\\assets\\group::appendtodom","bolt\\browser\\assets\\group::getiterator","bolt\\browser\\controller::__construct","bolt\\browser\\controller::init","bolt\\browser\\controller::before","bolt\\browser\\controller::after","bolt\\browser\\controller::uselayout","bolt\\browser\\controller::getuselayout","bolt\\browser\\controller::__get","bolt\\browser\\controller::__set","bolt\\browser\\controller::getparameters","bolt\\browser\\controller::view","bolt\\browser\\controller\\closure::build","bolt\\browser\\controller\\route::__construct","bolt\\browser\\controller\\route::__get","bolt\\browser\\controller\\route::exception","bolt\\browser\\controller\\route::format","bolt\\browser\\controller\\route::build","bolt\\browser\\controller\\route::run","bolt\\browser\\middleware::__construct","bolt\\browser\\middleware::init","bolt\\browser\\middleware::__get","bolt\\browser\\middleware::execute","bolt\\browser\\middleware\\assets::init","bolt\\browser\\middleware\\assets::before","bolt\\browser\\middleware\\closure::setevent","bolt\\browser\\middleware\\closure::setclosure","bolt\\browser\\middleware\\closure::before","bolt\\browser\\middleware\\closure::handle","bolt\\browser\\middleware\\closure::after","bolt\\browser\\middleware\\direct::before","bolt\\browser\\request::__construct","bolt\\browser\\request::getcontext","bolt\\browser\\request::is404","bolt\\browser\\response::__construct","bolt\\browser\\response::isreadytosend","bolt\\browser\\response\\format::__construct","bolt\\browser\\response\\format::setheader","bolt\\browser\\response\\format::setcontent","bolt\\browser\\response\\format::getcontent","bolt\\browser\\response\\format::getcontenttype","bolt\\browser\\response\\format::__invoke","bolt\\browser\\response\\format\\json::format","bolt\\browser\\response\\format\\xhr::format","bolt\\browser\\response\\format\\xml::format","bolt\\browser\\response\\redirect::__construct","bolt\\browser\\response\\redirect::seturl","bolt\\browser\\router::__construct","bolt\\browser\\router::getcollection","bolt\\browser\\router::__call","bolt\\browser\\router::add","bolt\\browser\\router::getbyname","bolt\\browser\\router::match","bolt\\browser\\router::loadfromcontrollers","bolt\\browser\\router\\collection::create","bolt\\browser\\router\\route::create","bolt\\browser\\router\\route::setname","bolt\\browser\\router\\route::getname","bolt\\browser\\router\\route::setcontroller","bolt\\browser\\router\\route::getcontroller","bolt\\browser\\router\\route::setrequire","bolt\\browser\\router\\route::setaction","bolt\\browser\\router\\route::setformats","bolt\\browser\\router\\route::compile","bolt\\browser\\views::__construct","bolt\\browser\\views::dir","bolt\\browser\\views::engine","bolt\\browser\\views::getengines","bolt\\browser\\views::getdirs","bolt\\browser\\views::find","bolt\\browser\\views::exists","bolt\\browser\\views::create","bolt\\browser\\views::compile","bolt\\browser\\views\\compiled::__construct","bolt\\browser\\views\\compiled::render","bolt\\browser\\views\\compiled::__invoke","bolt\\browser\\views\\compiled::__tostring","bolt\\browser\\views\\face::__invoke","bolt\\browser\\views\\face::render","bolt\\browser\\views\\face::__tostring","bolt\\browser\\views\\file::__construct","bolt\\browser\\views\\file::render","bolt\\browser\\views\\file::__invoke","bolt\\browser\\views\\file::__tostring","bolt\\cli::__construct","bolt\\cli::getapp","bolt\\cli::getconsole","bolt\\cli::getinput","bolt\\cli::getoutput","bolt\\cli::execute","bolt\\cli\\command::__construct","bolt\\cli\\command::__get","bolt\\cli\\command::get","bolt\\cli\\command::setname","bolt\\cli\\command::setaliases","bolt\\cli\\command::writeln","bolt\\cli\\command::writeerror","bolt\\cli\\command::arg","bolt\\cli\\command::opt","bolt\\cli\\command::init","bolt\\cli\\command::execute","bolt\\client::bind","bolt\\client\\build::call","bolt\\client\\compile::init","bolt\\client\\compile::generate","bolt\\client\\compile::clean","bolt\\client\\compile::savecompileloader","bolt\\client\\compile::makedir","bolt\\config::__construct","bolt\\config::register","bolt\\config::getregistered","bolt\\config::__get","bolt\\config::get","bolt\\config::set","bolt\\config::remove","bolt\\config::exists","bolt\\config::getiterator","bolt\\config::offsetset","bolt\\config::offsetexists","bolt\\config::offsetunset","bolt\\config::offsetget","bolt\\dom::__construct","bolt\\dom::guid","bolt\\dom::doc","bolt\\dom::addref","bolt\\dom::importnode","bolt\\dom::find","bolt\\dom::html","bolt\\dom::append","bolt\\dom::offsetexists","bolt\\dom::offsetget","bolt\\dom::offsetset","bolt\\dom::offsetunset","bolt\\dom::__tostring","bolt\\dom::create","bolt\\dom\\element::__construct","bolt\\dom\\element::reset","bolt\\dom\\element::create","bolt\\dom\\element::guid","bolt\\dom\\element::createandappend","bolt\\dom\\element::node","bolt\\dom\\element::__get","bolt\\dom\\element::__call","bolt\\dom\\element::html","bolt\\dom\\element::append","bolt\\dom\\element::attr","bolt\\dom\\element::addclass","bolt\\dom\\element::setstyle","bolt\\dom\\element::children","bolt\\dom\\element::remove","bolt\\dom\\element::offsetexists","bolt\\dom\\element::offsetget","bolt\\dom\\element::offsetset","bolt\\dom\\element::offsetunset","bolt\\dom\\fragment::__construct","bolt\\dom\\fragment::guid","bolt\\dom\\fragment::reset","bolt\\dom\\fragment::html","bolt\\dom\\fragment::__call","bolt\\dom\\fragment::offsetexists","bolt\\dom\\fragment::offsetget","bolt\\dom\\fragment::offsetset","bolt\\dom\\fragment::offsetunset","bolt\\dom\\fragment::__tostring","bolt\\dom\\nodelist::__construct","bolt\\dom\\nodelist::__call","bolt\\dom\\nodelist::item","bolt\\dom\\nodelist::first","bolt\\dom\\nodelist::last","bolt\\dom\\nodelist::size","bolt\\dom\\nodelist::html","bolt\\dom\\nodelist::__tostring","bolt\\helpers\\base::param","bolt\\helpers\\base::mergearray","bolt\\helpers\\classes::getreflectionclass","bolt\\helpers\\classes::normalizeclassname","bolt\\helpers\\classes::getdeclaredclasses","bolt\\helpers\\classes::getclassimplements","bolt\\helpers\\classes::getsubclassof","bolt\\helpers\\classes::classuses","bolt\\helpers\\collection::each","bolt\\helpers\\collection::first","bolt\\helpers\\collection::last","bolt\\helpers\\collection::filter","bolt\\helpers\\collection::push","bolt\\helpers\\collection::shift","bolt\\helpers\\collection::unshift","bolt\\helpers\\collection::getiterator","bolt\\helpers\\collection::count","bolt\\helpers\\collection::jsonserialize","bolt\\helpers\\collection::offsetset","bolt\\helpers\\collection::offsetexists","bolt\\helpers\\collection::offsetunset","bolt\\helpers\\collection::offsetget","bolt\\helpers\\events::addlistener","bolt\\helpers\\events::removelistener","bolt\\helpers\\events::getlisteners","bolt\\helpers\\events::getalllisteners","bolt\\helpers\\events::once","bolt\\helpers\\events::on","bolt\\helpers\\events::off","bolt\\helpers\\events::fire","bolt\\helpers\\events::executelistener","bolt\\helpers\\events\\event::__construct","bolt\\helpers\\events\\event::__get","bolt\\helpers\\events\\event::data","bolt\\helpers\\events\\event::arg","bolt\\helpers\\events\\listener::__construct","bolt\\helpers\\events\\listener::__get","bolt\\helpers\\events\\listener::once","bolt\\helpers\\events\\listener::context","bolt\\helpers\\events\\listener::detach","bolt\\helpers\\events\\listener::execute","bolt\\helpers\\fs::path","bolt\\helpers\\fs::getregexfiles","bolt\\helpers\\fs::requirefrompath","bolt\\helpers\\fs::fs","bolt\\helpers\\fs\\file::__tostring","bolt\\helpers\\fs\\glob::__construct","bolt\\helpers\\fs\\glob::setpath","bolt\\helpers\\fs\\glob::getpath","bolt\\helpers\\fs\\glob::setflags","bolt\\helpers\\fs\\glob::getiterator","bolt\\helpers\\fs\\glob::asarray","bolt\\helpers\\fs\\glob::count","bolt\\helpers\\fs\\rdir::__construct","bolt\\helpers\\fs\\rdir::asarray","bolt\\models::__construct","bolt\\models::getapp","bolt\\models::getcollection","bolt\\models::generateentity","bolt\\models::getentitymanager","bolt\\models::get","bolt\\models::find","bolt\\models::findall","bolt\\models::findby","bolt\\models::findoneby","bolt\\models::alias","bolt\\models::getaliases","bolt\\models::offsetset","bolt\\models::offsetexists","bolt\\models::offsetunset","bolt\\models::offsetget","bolt\\models::generate","bolt\\models\\collection::__construct","bolt\\models\\collection::push","bolt\\models\\collection::unshift","bolt\\models\\driver::__construct","bolt\\models\\driver::loadmetadataforclass","bolt\\models\\driver::getallclassnames","bolt\\models\\driver::istransient","bolt\\models\\entity::getapp","bolt\\models\\entity::setmanager","bolt\\models\\entity::getmanager","bolt\\models\\entity::setloaded","bolt\\models\\entity::isloaded","bolt\\models\\entity::loaded","bolt\\models\\entity::getvalue","bolt\\models\\entity::__get","bolt\\models\\entity::__set","bolt\\models\\proxy::__construct","bolt\\models\\proxy::getclassname","bolt\\models\\proxy::__call","bolt\\models\\types\\stringarray::getsqldeclaration","bolt\\models\\types\\stringarray::converttophpvalue","bolt\\models\\types\\stringarray::converttodatabasevalue","bolt\\models\\types\\stringarray::getname","bolt\\models\\types\\timestamp::getsqldeclaration","bolt\\models\\types\\timestamp::converttophpvalue","bolt\\models\\types\\timestamp::converttodatabasevalue","bolt\\models\\types\\timestamp::getname","bolt\\plugin::plug","bolt\\plugin::getplugins","bolt\\plugin::pluginexists","bolt\\plugin::plugin","bolt\\plugin::unplug","bolt\\plugin::offsetset","bolt\\plugin::offsetexists","bolt\\plugin::offsetunset","bolt\\plugin::offsetget","bolt\\plugin\\factory::factory","bolt\\render::__construct","bolt\\render::engine","bolt\\render::hasengine","bolt\\render::getengines","bolt\\render::getengine","bolt\\render::string","bolt\\render::file","bolt\\render\\base::cancompile","bolt\\render\\base::__construct","bolt\\render\\base::render","bolt\\render\\base::renderfile","bolt\\render\\base::rendercompiled","bolt\\render\\dom::compile","bolt\\render\\dom::render","bolt\\render\\handlebars::cancompile","bolt\\render\\handlebars::compile","bolt\\render\\handlebars::render","bolt\\render\\handlebars::rendercompiled","bolt\\render\\xml::compile","bolt\\render\\xml::render","bolt\\render\\xml\\generate::__construct","bolt\\render\\xml\\generate::getdata","bolt\\render\\xml\\generate::render","bolt\\render\\xml\\generate::__tostring","bolt\\source\\curl::__construct","bolt\\source\\curl::getclient","bolt\\source\\curl::getmodelentitymanager","bolt\\source\\curl::getrepository","bolt\\source\\curl::__call","bolt\\source\\curl\\repository::__construct","bolt\\source\\curl\\repository::generateentity","bolt\\source\\curl\\repository::find","bolt\\source\\curl\\repository::findby","bolt\\source\\curl\\repository::findoneby","bolt\\source\\database::__construct","bolt\\source\\database::gethandle","bolt\\source\\database::getmodelentitymanager"],
        'info': [["","",".html","","",3],["bolt","","bolt.html","","",3],["bolt\\browser","","bolt\/browser.html","","",3],["bolt\\browser\\assets","","bolt\/browser\/assets.html","","",3],["bolt\\browser\\controller","","bolt\/browser\/controller.html","","",3],["bolt\\browser\\middleware","","bolt\/browser\/middleware.html","","",3],["bolt\\browser\\response","","bolt\/browser\/response.html","","",3],["bolt\\browser\\response\\format","","bolt\/browser\/response\/format.html","","",3],["bolt\\browser\\router","","bolt\/browser\/router.html","","",3],["bolt\\browser\\views","","bolt\/browser\/views.html","","",3],["bolt\\cli","","bolt\/cli.html","","",3],["bolt\\client","","bolt\/client.html","","",3],["bolt\\dom","","bolt\/dom.html","","",3],["bolt\\events","","bolt\/events.html","","",3],["bolt\\exceptions","","bolt\/exceptions.html","","",3],["bolt\\helpers","","bolt\/helpers.html","","",3],["bolt\\helpers\\events","","bolt\/helpers\/events.html","","",3],["bolt\\helpers\\fs","","bolt\/helpers\/fs.html","","",3],["bolt\\models","","bolt\/models.html","","",3],["bolt\\models\\types","","bolt\/models\/types.html","","",3],["bolt\\plugin","","bolt\/plugin.html","","",3],["bolt\\render","","bolt\/render.html","","",3],["bolt\\render\\xml","","bolt\/render\/xml.html","","",3],["bolt\\source","","bolt\/source.html","","",3],["bolt\\source\\curl","","bolt\/source\/curl.html","","",3],["b","","b.html"," < bolt","shortcut to bolt",1],["bolt","","bolt.html","","",1],["application","bolt","bolt\/application.html"," < plugin","Base bolt applicatin class",1],["base","bolt","bolt\/base.html","","",1],["browser","bolt","bolt\/browser.html"," < plugin","Base browser (http) handler",1],["assets","bolt\\browser","bolt\/browser\/assets.html","","asset manager",1],["group","bolt\\browser\\assets","bolt\/browser\/assets\/group.html","","",1],["controller","bolt\\browser","bolt\/browser\/controller.html","","base controller class",1],["closure","bolt\\browser\\controller","bolt\/browser\/controller\/closure.html"," < route","closure controller class",1],["route","bolt\\browser\\controller","bolt\/browser\/controller\/route.html"," < controller","route controller",1],["middleware","bolt\\browser","bolt\/browser\/middleware.html","","Abstract middleware class",1],["assets","bolt\\browser\\middleware","bolt\/browser\/middleware\/assets.html"," < middleware","",1],["closure","bolt\\browser\\middleware","bolt\/browser\/middleware\/closure.html"," < middleware","closure middleware holder",1],["direct","bolt\\browser\\middleware","bolt\/browser\/middleware\/direct.html"," < middleware","",1],["request","bolt\\browser","bolt\/browser\/request.html"," < Request","request class",1],["response","bolt\\browser","bolt\/browser\/response.html"," < Response","response object",1],["format","bolt\\browser\\response","bolt\/browser\/response\/format.html","","Abstract format class",1],["face","bolt\\browser\\response\\format","bolt\/browser\/response\/format\/face.html","","",1],["html","bolt\\browser\\response\\format","bolt\/browser\/response\/format\/html.html"," < format","",1],["json","bolt\\browser\\response\\format","bolt\/browser\/response\/format\/json.html"," < format","",1],["xhr","bolt\\browser\\response\\format","bolt\/browser\/response\/format\/xhr.html"," < format","",1],["xml","bolt\\browser\\response\\format","bolt\/browser\/response\/format\/xml.html"," < format","",1],["redirect","bolt\\browser\\response","bolt\/browser\/response\/redirect.html"," < response","",1],["router","bolt\\browser","bolt\/browser\/router.html","","router manager",1],["collection","bolt\\browser\\router","bolt\/browser\/router\/collection.html"," < RouteCollection","collection of routes",1],["face","bolt\\browser\\router","bolt\/browser\/router\/face.html","","router route interface",1],["route","bolt\\browser\\router","bolt\/browser\/router\/route.html"," < Route","base route class",1],["views","bolt\\browser","bolt\/browser\/views.html","","views manager",1],["compiled","bolt\\browser\\views","bolt\/browser\/views\/compiled.html","","",1],["face","bolt\\browser\\views","bolt\/browser\/views\/face.html","","",1],["file","bolt\\browser\\views","bolt\/browser\/views\/file.html","","",1],["cli","bolt","bolt\/cli.html"," < plugin","",1],["command","bolt\\cli","bolt\/cli\/command.html"," < Command","",1],["client","bolt","bolt\/client.html","","",1],["build","bolt\\client","bolt\/client\/build.html"," < command","",1],["command","bolt\\client","bolt\/client\/command.html"," < command","",1],["compile","bolt\\client","bolt\/client\/compile.html"," < command","",1],["deploy","bolt\\client","bolt\/client\/deploy.html","","",1],["config","bolt","bolt\/config.html","","Base configuration manager",1],["dom","bolt","bolt\/dom.html","","DOM HTML parser",1],["element","bolt\\dom","bolt\/dom\/element.html","","",1],["fragment","bolt\\dom","bolt\/dom\/fragment.html","","",1],["nodeList","bolt\\dom","bolt\/dom\/nodeList.html"," < SplObjectStorage","",1],["ResourceNotFoundException","bolt\\exceptions","bolt\/exceptions\/ResourceNotFoundException.html"," < Exception","",1],["base","bolt\\helpers","bolt\/helpers\/base.html","","base helpers class",1],["classes","bolt\\helpers","bolt\/helpers\/classes.html","","classes helper",1],["collection","bolt\\helpers","bolt\/helpers\/collection.html","","",1],["events","bolt\\helpers","bolt\/helpers\/events.html","","Add events handling to an object",1],["event","bolt\\helpers\\events","bolt\/helpers\/events\/event.html","","Event Object",1],["listener","bolt\\helpers\\events","bolt\/helpers\/events\/listener.html","","event listener",1],["fs","bolt\\helpers","bolt\/helpers\/fs.html","","",1],["file","bolt\\helpers\\fs","bolt\/helpers\/fs\/file.html"," < SplFileObject","",1],["glob","bolt\\helpers\\fs","bolt\/helpers\/fs\/glob.html","","",1],["rdir","bolt\\helpers\\fs","bolt\/helpers\/fs\/rdir.html","","",1],["models","bolt","bolt\/models.html","","model manager",1],["collection","bolt\\models","bolt\/models\/collection.html"," < collection","model collection",1],["driver","bolt\\models","bolt\/models\/driver.html","","mdoels driver",1],["entity","bolt\\models","bolt\/models\/entity.html","","",1],["proxy","bolt\\models","bolt\/models\/proxy.html","","model proxy",1],["stringArray","bolt\\models\\types","bolt\/models\/types\/stringArray.html"," < Type","string_array type",1],["timestamp","bolt\\models\\types","bolt\/models\/types\/timestamp.html"," < Type","Timestamp type",1],["plugin","bolt","bolt\/plugin.html","","Base plugin abstract",1],["factory","bolt\\plugin","bolt\/plugin\/factory.html","","factory interface",1],["singleton","bolt\\plugin","bolt\/plugin\/singleton.html","","singleton interface",1],["render","bolt","bolt\/render.html","","",1],["base","bolt\\render","bolt\/render\/base.html","","base render engine class",1],["dom","bolt\\render","bolt\/render\/dom.html"," < base","render a dom string",1],["handlebars","bolt\\render","bolt\/render\/handlebars.html"," < base","handlare renderer",1],["xml","bolt\\render","bolt\/render\/xml.html"," < base","render a dom string",1],["generate","bolt\\render\\xml","bolt\/render\/xml\/generate.html","","",1],["curl","bolt\\source","bolt\/source\/curl.html","","",1],["repository","bolt\\source\\curl","bolt\/source\/curl\/repository.html","","curl model repository",1],["database","bolt\\source","bolt\/source\/database.html","","",1],["face","bolt\\source","bolt\/source\/face.html","","",1],["bolt::instance","bolt","bolt.html#method_instance","()","instance",2],["bolt::__callStatic","bolt","bolt.html#method___callStatic","(string $name, array $args = array())","forward call onto the bolt instance",2],["bolt::init","bolt","bolt.html#method_init","(array $config = array())","inialize a new application interface",2],["application::__construct","bolt\\application","bolt\/application.html#method___construct","(<abbr title=\"bolt\\$config\">$config<\/abbr> $config = array())","construct a new application instance",2],["application::autoload","bolt\\application","bolt\/application.html#method_autoload","(string $class)","autoload",2],["application::getBootstrapDir","bolt\\application","bolt\/application.html#method_getBootstrapDir","()","getBootsrapDir",2],["application::bootstrap","bolt\\application","bolt\/application.html#method_bootstrap","(string $what)","load boostrap files",2],["application::getAutoload","bolt\\application","bolt\/application.html#method_getAutoload","()","return all autoload settings",2],["application::env","bolt\\application","bolt\/application.html#method_env","(string $env, <abbr title=\"bolt\\Closure\">Closure<\/abbr> $callback)","check env and run callback if in that env",2],["application::hasRun","bolt\\application","bolt\/application.html#method_hasRun","()","has the application run yet",2],["application::getRoot","bolt\\application","bolt\/application.html#method_getRoot","()","get the root path",2],["application::setRoot","bolt\\application","bolt\/application.html#method_setRoot","(string $root)","set the root path for the app",2],["application::path","bolt\\application","bolt\/application.html#method_path","()","get a path relative to the $root",2],["application::load","bolt\\application","bolt\/application.html#method_load","(string $ns, string $path)","add a ns to the class loader",2],["application::getComposerFile","bolt\\application","bolt\/application.html#method_getComposerFile","()","get composer file",2],["application::run","bolt\\application","bolt\/application.html#method_run","()","run the application",2],["base::__construct","bolt\\base","bolt\/base.html#method___construct","(array $helpers = array())","Constructor",2],["base::app","bolt\\base","bolt\/base.html#method_app","($config = array())","app",2],["base::env","bolt\\base","bolt\/base.html#method_env","(string $env = null)","set the env",2],["base::guid","bolt\\base","bolt\/base.html#method_guid","(string $prefix = &#039;bolt&#039;)","return a globally unique string",2],["base::__call","bolt\\base","bolt\/base.html#method___call","(string $name, array $args)","call a helper method",2],["base::helpers","bolt\\base","bolt\/base.html#method_helpers","(string $class)","attache helper classes to the global bolt instance",2],["base::getHelpers","bolt\\base","bolt\/base.html#method_getHelpers","()","",2],["base::exepction","bolt\\base","bolt\/base.html#method_exepction","($class, $message = null, $code = null)","",2],["browser::start","bolt\\browser","bolt\/browser.html#method_start","($config = array())","start a new browser instance",2],["browser::__construct","bolt\\browser","bolt\/browser.html#method___construct","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app, <a href=\"bolt\/browser\/request.html\"><abbr title=\"bolt\\browser\\request\">request<\/abbr><\/a> $req = null, <a href=\"bolt\/browser\/response.html\"><abbr title=\"bolt\\browser\\response\">response<\/abbr><\/a> $resp = null)","Constructor.",2],["browser::__get","bolt\\browser","bolt\/browser.html#method___get","(string $name)","returns a private variable",2],["browser::__call","bolt\\browser","bolt\/browser.html#method___call","(string $name, array $args)","call a method or passthrough to other plugin",2],["browser::getApp","bolt\\browser","bolt\/browser.html#method_getApp","()","return the app instance",2],["browser::getRequest","bolt\\browser","bolt\/browser.html#method_getRequest","()","return the request",2],["browser::setRequest","bolt\\browser","bolt\/browser.html#method_setRequest","(<abbr title=\"bolt\\bolt\\browser\\request\">request<\/abbr> $req)","set the response",2],["browser::getResponse","bolt\\browser","bolt\/browser.html#method_getResponse","()","get the response object",2],["browser::setResponse","bolt\\browser","bolt\/browser.html#method_setResponse","(<abbr title=\"bolt\\bolt\\browser\\response\">response<\/abbr> $resp)","set the response object",2],["browser::path","bolt\\browser","bolt\/browser.html#method_path","()","get a path relative to root",2],["browser::load","bolt\\browser","bolt\/browser.html#method_load","()","load passthrough to app",2],["browser::bind","bolt\\browser","bolt\/browser.html#method_bind","(string|<abbr title=\"bolt\\callback\">callback<\/abbr> $name, string|<abbr title=\"bolt\\boject\">boject<\/abbr> $class = null, array $config = array())","bind middleware to this request and response",2],["browser::getMiddleware","bolt\\browser","bolt\/browser.html#method_getMiddleware","()","return a list of all middleware",2],["browser::run","bolt\\browser","bolt\/browser.html#method_run","()","pass off a run call to the app",2],["browser::execute","bolt\\browser","bolt\/browser.html#method_execute","()","run the browser request and send a response to the",2],["browser::runMiddleware","bolt\\browser","bolt\/browser.html#method_runMiddleware","(string $method, array $params = array())","run all middleware for a method",2],["browser::runMiddlewareByName","bolt\\browser","bolt\/browser.html#method_runMiddlewareByName","(string $name, string $method, array $params = array())","run a middleware function by name",2],["assets::__construct","bolt\\browser\\assets","bolt\/browser\/assets.html#method___construct","(<abbr title=\"bolt\\browser\\bolt\\browser\">browser<\/abbr> $browser, array $config = array())","Constructor",2],["assets::globals","bolt\\browser\\assets","bolt\/browser\/assets.html#method_globals","(string|array $ext, string $path = false)","register files to append to specific file type (by",2],["assets::filter","bolt\\browser\\assets","bolt\/browser\/assets.html#method_filter","(string|array $ext, string $class = false, array $args = array())","register a filter for a file type (by file extension)",2],["assets::add","bolt\\browser\\assets","bolt\/browser\/assets.html#method_add","(string $type, string $name = false, array $files = false)","add a new file to the manager",2],["assets::createGroup","bolt\\browser\\assets","bolt\/browser\/assets.html#method_createGroup","($type, $name, $files = array())","",2],["assets::find","bolt\\browser\\assets","bolt\/browser\/assets.html#method_find","(string $file)","find a file in one of $dirs",2],["assets::findDir","bolt\\browser\\assets","bolt\/browser\/assets.html#method_findDir","(string $path)","find a files dir",2],["assets::out","bolt\\browser\\assets","bolt\/browser\/assets.html#method_out","($type, $name, $combo = false)","output a tag for give group",2],["assets::url","bolt\\browser\\assets","bolt\/browser\/assets.html#method_url","(mixed $path)","url path",2],["assets::getGroup","bolt\\browser\\assets","bolt\/browser\/assets.html#method_getGroup","($type, $name)","get all file objects in a group",2],["assets::stylesheet","bolt\\browser\\assets","bolt\/browser\/assets.html#method_stylesheet","(array $leafs)","return a stylesheet tag",2],["assets::getGlobals","bolt\\browser\\assets","bolt\/browser\/assets.html#method_getGlobals","(string $ext)","get all registered globals for an extension",2],["assets::getFilters","bolt\\browser\\assets","bolt\/browser\/assets.html#method_getFilters","($ext, $when = null)","get all registered filters for an extension",2],["assets::compile","bolt\\browser\\assets","bolt\/browser\/assets.html#method_compile","(<abbr title=\"bolt\\browser\\bolt\\events\\event\">event<\/abbr> $e)","compile assets into the compile directory",2],["assets::compileFile","bolt\\browser\\assets","bolt\/browser\/assets.html#method_compileFile","($file)","",2],["group::__construct","bolt\\browser\\assets\\group","bolt\/browser\/assets\/group.html#method___construct","(<abbr title=\"bolt\\browser\\assets\\bolt\\browser\\assets\">assets<\/abbr> $assets, $name, $type)","",2],["group::getType","bolt\\browser\\assets\\group","bolt\/browser\/assets\/group.html#method_getType","()","",2],["group::getName","bolt\\browser\\assets\\group","bolt\/browser\/assets\/group.html#method_getName","()","",2],["group::add","bolt\\browser\\assets\\group","bolt\/browser\/assets\/group.html#method_add","($files)","",2],["group::getComboUrl","bolt\\browser\\assets\\group","bolt\/browser\/assets\/group.html#method_getComboUrl","()","",2],["group::appendToDom","bolt\\browser\\assets\\group","bolt\/browser\/assets\/group.html#method_appendToDom","($dom, $to, $combo = null, $attr = array())","",2],["group::getIterator","bolt\\browser\\assets\\group","bolt\/browser\/assets\/group.html#method_getIterator","()","",2],["controller::__construct","bolt\\browser\\controller","bolt\/browser\/controller.html#method___construct","(<abbr title=\"bolt\\browser\\bolt\\browser\">browser<\/abbr> $browser)","Construct",2],["controller::init","bolt\\browser\\controller","bolt\/browser\/controller.html#method_init","()","initalize class holder class",2],["controller::before","bolt\\browser\\controller","bolt\/browser\/controller.html#method_before","()","",2],["controller::after","bolt\\browser\\controller","bolt\/browser\/controller.html#method_after","()","",2],["controller::useLayout","bolt\\browser\\controller","bolt\/browser\/controller.html#method_useLayout","(bool $layout)","toggle use the layout",2],["controller::getUseLayout","bolt\\browser\\controller","bolt\/browser\/controller.html#method_getUseLayout","()","check useLayout varaible",2],["controller::__get","bolt\\browser\\controller","bolt\/browser\/controller.html#method___get","(string $name)","get a magic variables",2],["controller::__set","bolt\\browser\\controller","bolt\/browser\/controller.html#method___set","(string $name, mixed $value)","set a paramater",2],["controller::getParameters","bolt\\browser\\controller","bolt\/browser\/controller.html#method_getParameters","()","get paramaters",2],["controller::view","bolt\\browser\\controller","bolt\/browser\/controller.html#method_view","(string $file, array $vars = array())","create a view",2],["closure::build","bolt\\browser\\controller\\closure","bolt\/browser\/controller\/closure.html#method_build","(array $params = array())","build the controller",2],["route::__construct","bolt\\browser\\controller\\route","bolt\/browser\/controller\/route.html#method___construct","(<abbr title=\"bolt\\browser\\controller\\bolt\\browser\">browser<\/abbr> $browser, <abbr title=\"bolt\\browser\\controller\\bolt\\browser\\request\">request<\/abbr> $req = null, <abbr title=\"bolt\\browser\\controller\\bolt\\browser\\response\">response<\/abbr> $resp = null)","Construct",2],["route::__get","bolt\\browser\\controller\\route","bolt\/browser\/controller\/route.html#method___get","(string $name)","magic get method",2],["route::exception","bolt\\browser\\controller\\route","bolt\/browser\/controller\/route.html#method_exception","(string $class, string $message = null, int $code = null)","throw an exception",2],["route::format","bolt\\browser\\controller\\route","bolt\/browser\/controller\/route.html#method_format","(string|array $format, mixed $content = false)","add a response format",2],["route::build","bolt\\browser\\controller\\route","bolt\/browser\/controller\/route.html#method_build","(array $params = array())","build the controller",2],["route::run","bolt\\browser\\controller\\route","bolt\/browser\/controller\/route.html#method_run","(array $params)","run the controller",2],["middleware::__construct","bolt\\browser\\middleware","bolt\/browser\/middleware.html#method___construct","(<abbr title=\"bolt\\browser\\bolt\\browser\">browser<\/abbr> $browser, array $config = array())","Constructor",2],["middleware::init","bolt\\browser\\middleware","bolt\/browser\/middleware.html#method_init","()","default init class",2],["middleware::__get","bolt\\browser\\middleware","bolt\/browser\/middleware.html#method___get","(string $name)","magic get",2],["middleware::execute","bolt\\browser\\middleware","bolt\/browser\/middleware.html#method_execute","(string $method, array $args = array())","execute a middleware method",2],["assets::init","bolt\\browser\\middleware\\assets","bolt\/browser\/middleware\/assets.html#method_init","()","default init class",2],["assets::before","bolt\\browser\\middleware\\assets","bolt\/browser\/middleware\/assets.html#method_before","()","",2],["closure::setEvent","bolt\\browser\\middleware\\closure","bolt\/browser\/middleware\/closure.html#method_setEvent","(string $event)","set the event to fire middleware",2],["closure::setClosure","bolt\\browser\\middleware\\closure","bolt\/browser\/middleware\/closure.html#method_setClosure","(<abbr title=\"bolt\\browser\\middleware\\Closure\">Closure<\/abbr> $closure)","set the middleware closure",2],["closure::before","bolt\\browser\\middleware\\closure","bolt\/browser\/middleware\/closure.html#method_before","(array $args = array())","before middleware event",2],["closure::handle","bolt\\browser\\middleware\\closure","bolt\/browser\/middleware\/closure.html#method_handle","(array $args = array())","handle the middleware request",2],["closure::after","bolt\\browser\\middleware\\closure","bolt\/browser\/middleware\/closure.html#method_after","(array $args = array())","after middleware event",2],["direct::before","bolt\\browser\\middleware\\direct","bolt\/browser\/middleware\/direct.html#method_before","()","",2],["request::__construct","bolt\\browser\\request","bolt\/browser\/request.html#method___construct","()","Constructor.",2],["request::getContext","bolt\\browser\\request","bolt\/browser\/request.html#method_getContext","()","get the request context",2],["request::is404","bolt\\browser\\request","bolt\/browser\/request.html#method_is404","(bool $flag = null)","is the request currently in a 404 state",2],["response::__construct","bolt\\browser\\response","bolt\/browser\/response.html#method___construct","()","Constructor",2],["response::isReadyToSend","bolt\\browser\\response","bolt\/browser\/response.html#method_isReadyToSend","($ready = null)","",2],["format::__construct","bolt\\browser\\response\\format","bolt\/browser\/response\/format.html#method___construct","(<abbr title=\"bolt\\browser\\response\\bolt\\browser\\response\">response<\/abbr> $parent)","Construct",2],["format::setHeader","bolt\\browser\\response\\format","bolt\/browser\/response\/format.html#method_setHeader","(string $name, string|array $value, bool $replace = true)","set a header",2],["format::setContent","bolt\\browser\\response\\format","bolt\/browser\/response\/format.html#method_setContent","(mixed $content)","set the format content",2],["format::getContent","bolt\\browser\\response\\format","bolt\/browser\/response\/format.html#method_getContent","()","get the content",2],["format::getContentType","bolt\\browser\\response\\format","bolt\/browser\/response\/format.html#method_getContentType","()","get the content type",2],["format::__invoke","bolt\\browser\\response\\format","bolt\/browser\/response\/format.html#method___invoke","()","invoke the format and return content",2],["json::format","bolt\\browser\\response\\format\\json","bolt\/browser\/response\/format\/json.html#method_format","($content)","",2],["xhr::format","bolt\\browser\\response\\format\\xhr","bolt\/browser\/response\/format\/xhr.html#method_format","($content)","",2],["xml::format","bolt\\browser\\response\\format\\xml","bolt\/browser\/response\/format\/xml.html#method_format","($content)","",2],["redirect::__construct","bolt\\browser\\response\\redirect","bolt\/browser\/response\/redirect.html#method___construct","($url = false, $code = 301)","Constructor",2],["redirect::setUrl","bolt\\browser\\response\\redirect","bolt\/browser\/response\/redirect.html#method_setUrl","($url)","",2],["router::__construct","bolt\\browser\\router","bolt\/browser\/router.html#method___construct","(<abbr title=\"bolt\\browser\\bolt\\browser\">browser<\/abbr> $browser, $config = array())","Constructor",2],["router::getCollection","bolt\\browser\\router","bolt\/browser\/router.html#method_getCollection","()","get collection",2],["router::__call","bolt\\browser\\router","bolt\/browser\/router.html#method___call","(string $name, array $args)","magic call",2],["router::add","bolt\\browser\\router","bolt\/browser\/router.html#method_add","(<abbr title=\"bolt\\browser\\bolt\\browser\\router\\route\">route<\/abbr> $route)","add a route to the toplevel collection",2],["router::getByName","bolt\\browser\\router","bolt\/browser\/router.html#method_getByName","($name)","",2],["router::match","bolt\\browser\\router","bolt\/browser\/router.html#method_match","(<abbr title=\"bolt\\browser\\bolt\\browser\\request\">request<\/abbr> $req, string $path = null)","match a request to defined routes",2],["router::loadFromControllers","bolt\\browser\\router","bolt\/browser\/router.html#method_loadFromControllers","(array $paths = array())","load all routes that are defined in controllers that",2],["collection::create","bolt\\browser\\router\\collection","bolt\/browser\/router\/collection.html#method_create","(array $routes = array())","static create route collection",2],["route::create","bolt\\browser\\router\\route","bolt\/browser\/router\/route.html#method_create","(array $route)","static create a route class",2],["route::setName","bolt\\browser\\router\\route","bolt\/browser\/router\/route.html#method_setName","(string $name)","set the route name",2],["route::getName","bolt\\browser\\router\\route","bolt\/browser\/router\/route.html#method_getName","()","get the route name",2],["route::setController","bolt\\browser\\router\\route","bolt\/browser\/router\/route.html#method_setController","(mixed $controller)","set the route controller",2],["route::getController","bolt\\browser\\router\\route","bolt\/browser\/router\/route.html#method_getController","()","get route controller",2],["route::setRequire","bolt\\browser\\router\\route","bolt\/browser\/router\/route.html#method_setRequire","(string $require)","set a required param",2],["route::setAction","bolt\\browser\\router\\route","bolt\/browser\/router\/route.html#method_setAction","(string $action)","set the controller action",2],["route::setFormats","bolt\\browser\\router\\route","bolt\/browser\/router\/route.html#method_setFormats","(string $format)","set response formats",2],["route::compile","bolt\\browser\\router\\route","bolt\/browser\/router\/route.html#method_compile","()","compile the route",2],["views::__construct","bolt\\browser\\views","bolt\/browser\/views.html#method___construct","(<abbr title=\"bolt\\browser\\bolt\\browser\">browser<\/abbr> $browser, array $config = array())","Constructor",2],["views::dir","bolt\\browser\\views","bolt\/browser\/views.html#method_dir","($path)","add a dir",2],["views::engine","bolt\\browser\\views","bolt\/browser\/views.html#method_engine","($ext, $class)","",2],["views::getEngines","bolt\\browser\\views","bolt\/browser\/views.html#method_getEngines","()","",2],["views::getDirs","bolt\\browser\\views","bolt\/browser\/views.html#method_getDirs","()","get view directories",2],["views::find","bolt\\browser\\views","bolt\/browser\/views.html#method_find","($file)","find a view file in given dirs",2],["views::exists","bolt\\browser\\views","bolt\/browser\/views.html#method_exists","(string $file, array $dirs = null)","check if a view exists",2],["views::create","bolt\\browser\\views","bolt\/browser\/views.html#method_create","(string $file, array $vars = array(), object $context = false)","create a view of self::$_class",2],["views::compile","bolt\\browser\\views","bolt\/browser\/views.html#method_compile","($e)","",2],["compiled::__construct","bolt\\browser\\views\\compiled","bolt\/browser\/views\/compiled.html#method___construct","(<abbr title=\"bolt\\browser\\views\\bolt\\browser\\views\">views<\/abbr> $manager, $config = array())","",2],["compiled::render","bolt\\browser\\views\\compiled","bolt\/browser\/views\/compiled.html#method_render","()","",2],["compiled::__invoke","bolt\\browser\\views\\compiled","bolt\/browser\/views\/compiled.html#method___invoke","()","",2],["compiled::__toString","bolt\\browser\\views\\compiled","bolt\/browser\/views\/compiled.html#method___toString","()","",2],["face::__invoke","bolt\\browser\\views\\face","bolt\/browser\/views\/face.html#method___invoke","()","",2],["face::render","bolt\\browser\\views\\face","bolt\/browser\/views\/face.html#method_render","()","",2],["face::__toString","bolt\\browser\\views\\face","bolt\/browser\/views\/face.html#method___toString","()","",2],["file::__construct","bolt\\browser\\views\\file","bolt\/browser\/views\/file.html#method___construct","(<abbr title=\"bolt\\browser\\views\\bolt\\browser\\views\">views<\/abbr> $manager, $config = array())","",2],["file::render","bolt\\browser\\views\\file","bolt\/browser\/views\/file.html#method_render","()","",2],["file::__invoke","bolt\\browser\\views\\file","bolt\/browser\/views\/file.html#method___invoke","()","",2],["file::__toString","bolt\\browser\\views\\file","bolt\/browser\/views\/file.html#method___toString","()","",2],["cli::__construct","bolt\\cli","bolt\/cli.html#method___construct","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app, $config = array())","",2],["cli::getApp","bolt\\cli","bolt\/cli.html#method_getApp","()","",2],["cli::getConsole","bolt\\cli","bolt\/cli.html#method_getConsole","()","",2],["cli::getInput","bolt\\cli","bolt\/cli.html#method_getInput","()","",2],["cli::getOutput","bolt\\cli","bolt\/cli.html#method_getOutput","()","",2],["cli::execute","bolt\\cli","bolt\/cli.html#method_execute","()","",2],["command::__construct","bolt\\cli\\command","bolt\/cli\/command.html#method___construct","(<abbr title=\"bolt\\cli\\bolt\\cli\">cli<\/abbr> $cli)","",2],["command::__get","bolt\\cli\\command","bolt\/cli\/command.html#method___get","($name)","",2],["command::get","bolt\\cli\\command","bolt\/cli\/command.html#method_get","($name)","",2],["command::setName","bolt\\cli\\command","bolt\/cli\/command.html#method_setName","($name)","",2],["command::setAliases","bolt\\cli\\command","bolt\/cli\/command.html#method_setAliases","($aliases)","",2],["command::writeln","bolt\\cli\\command","bolt\/cli\/command.html#method_writeln","()","",2],["command::writeError","bolt\\cli\\command","bolt\/cli\/command.html#method_writeError","($msg)","",2],["command::arg","bolt\\cli\\command","bolt\/cli\/command.html#method_arg","($name)","",2],["command::opt","bolt\\cli\\command","bolt\/cli\/command.html#method_opt","($name)","",2],["command::init","bolt\\cli\\command","bolt\/cli\/command.html#method_init","()","",2],["command::execute","bolt\\cli\\command","bolt\/cli\/command.html#method_execute","(<abbr title=\"Symfony\\Component\\Console\\Input\\InputInterface\">InputInterface<\/abbr> $input, <abbr title=\"Symfony\\Component\\Console\\Output\\OutputInterface\">OutputInterface<\/abbr> $output)","",2],["client::bind","bolt\\client","bolt\/client.html#method_bind","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app)","",2],["build::call","bolt\\client\\build","bolt\/client\/build.html#method_call","($pacakge = &#039;.&#039;)","",2],["compile::init","bolt\\client\\compile","bolt\/client\/compile.html#method_init","()","",2],["compile::generate","bolt\\client\\compile","bolt\/client\/compile.html#method_generate","()","",2],["compile::clean","bolt\\client\\compile","bolt\/client\/compile.html#method_clean","()","",2],["compile::saveCompileLoader","bolt\\client\\compile","bolt\/client\/compile.html#method_saveCompileLoader","($name, $data)","",2],["compile::makeDir","bolt\\client\\compile","bolt\/client\/compile.html#method_makeDir","($name)","",2],["config::__construct","bolt\\config","bolt\/config.html#method___construct","(<abbr title=\"bolt\\bolt\\application\">application<\/abbr> $app, array $config = array())","Constructor",2],["config::register","bolt\\config","bolt\/config.html#method_register","(string|array $name, string|array $data = array())","register one or more config namspaces",2],["config::getRegistered","bolt\\config","bolt\/config.html#method_getRegistered","()","return all registered namespaces",2],["config::__get","bolt\\config","bolt\/config.html#method___get","(string $name)","magic get a namespace",2],["config::get","bolt\\config","bolt\/config.html#method_get","(string $name, mixed $default = null)","get a value from a stored namespace",2],["config::set","bolt\\config","bolt\/config.html#method_set","(string $name, mixed $value)","set a value on a namespace",2],["config::remove","bolt\\config","bolt\/config.html#method_remove","(string $name)","remove a namespace",2],["config::exists","bolt\\config","bolt\/config.html#method_exists","(string $name)","does a key exist",2],["config::getIterator","bolt\\config","bolt\/config.html#method_getIterator","()","return an array iterator for storage items",2],["config::offsetSet","bolt\\config","bolt\/config.html#method_offsetSet","($name, $value)","set offset",2],["config::offsetExists","bolt\\config","bolt\/config.html#method_offsetExists","(string $name)","offset get",2],["config::offsetUnset","bolt\\config","bolt\/config.html#method_offsetUnset","(string $name)","unplug",2],["config::offsetGet","bolt\\config","bolt\/config.html#method_offsetGet","(string $name)","get a plugin",2],["dom::__construct","bolt\\dom","bolt\/dom.html#method___construct","(string $html = false, string $charset = &#039;UTF-8&#039;)","Constructor",2],["dom::guid","bolt\\dom","bolt\/dom.html#method_guid","()","return the global unique id of this dom object",2],["dom::doc","bolt\\dom","bolt\/dom.html#method_doc","()","return the root document",2],["dom::addRef","bolt\\dom","bolt\/dom.html#method_addRef","(<abbr title=\"bolt\\bolt\\dom\\element\">element<\/abbr> $el)","add an element refrance to this DOM",2],["dom::importNode","bolt\\dom","bolt\/dom.html#method_importNode","($node, $deep = false)","import a node into this document",2],["dom::find","bolt\\dom","bolt\/dom.html#method_find","(string $query, bool $returnRef = true)","query the DOM (using CSS selector) to find a node",2],["dom::html","bolt\\dom","bolt\/dom.html#method_html","()","return the HTML of this document",2],["dom::append","bolt\\dom","bolt\/dom.html#method_append","($what)","append",2],["dom::offsetExists","bolt\\dom","bolt\/dom.html#method_offsetExists","(string $name)","check if a node exists using a CSS selector",2],["dom::offsetGet","bolt\\dom","bolt\/dom.html#method_offsetGet","(string $name)","get a node using a CSS selector",2],["dom::offsetSet","bolt\\dom","bolt\/dom.html#method_offsetSet","(string $name, mixed $value)","create a node or replace an exists node",2],["dom::offsetUnset","bolt\\dom","bolt\/dom.html#method_offsetUnset","(string $name)","remove a node using a CSS selector",2],["dom::__toString","bolt\\dom","bolt\/dom.html#method___toString","()","return a string rep of DOM",2],["dom::create","bolt\\dom","bolt\/dom.html#method_create","($tag, $value = &#039;&#039;, $attr = array())","create a new element",2],["element::__construct","bolt\\dom\\element","bolt\/dom\/element.html#method___construct","($dom, $node = false)","",2],["element::reset","bolt\\dom\\element","bolt\/dom\/element.html#method_reset","($dom, $node)","",2],["element::create","bolt\\dom\\element","bolt\/dom\/element.html#method_create","($tag, $value = &#039;&#039;, $attr = array())","",2],["element::guid","bolt\\dom\\element","bolt\/dom\/element.html#method_guid","()","",2],["element::createAndAppend","bolt\\dom\\element","bolt\/dom\/element.html#method_createAndAppend","()","",2],["element::node","bolt\\dom\\element","bolt\/dom\/element.html#method_node","()","",2],["element::__get","bolt\\dom\\element","bolt\/dom\/element.html#method___get","($name)","",2],["element::__call","bolt\\dom\\element","bolt\/dom\/element.html#method___call","($name, $args)","",2],["element::html","bolt\\dom\\element","bolt\/dom\/element.html#method_html","()","",2],["element::append","bolt\\dom\\element","bolt\/dom\/element.html#method_append","($what)","",2],["element::attr","bolt\\dom\\element","bolt\/dom\/element.html#method_attr","($name, $value = null)","",2],["element::addClass","bolt\\dom\\element","bolt\/dom\/element.html#method_addClass","($class)","",2],["element::setStyle","bolt\\dom\\element","bolt\/dom\/element.html#method_setStyle","($prop, $value = null)","",2],["element::children","bolt\\dom\\element","bolt\/dom\/element.html#method_children","()","",2],["element::remove","bolt\\dom\\element","bolt\/dom\/element.html#method_remove","()","",2],["element::offsetExists","bolt\\dom\\element","bolt\/dom\/element.html#method_offsetExists","($name)","",2],["element::offsetGet","bolt\\dom\\element","bolt\/dom\/element.html#method_offsetGet","($name)","",2],["element::offsetSet","bolt\\dom\\element","bolt\/dom\/element.html#method_offsetSet","($name, $value)","",2],["element::offsetUnset","bolt\\dom\\element","bolt\/dom\/element.html#method_offsetUnset","($name)","",2],["fragment::__construct","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method___construct","($tag, $attr = array())","",2],["fragment::guid","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_guid","()","",2],["fragment::reset","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_reset","(<abbr title=\"bolt\\dom\\bolt\\dom\">dom<\/abbr> $dom, $node)","",2],["fragment::html","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_html","()","",2],["fragment::__call","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method___call","($name, $args)","",2],["fragment::offsetExists","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_offsetExists","($name)","",2],["fragment::offsetGet","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_offsetGet","($name)","",2],["fragment::offsetSet","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_offsetSet","($name, $value)","",2],["fragment::offsetUnset","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_offsetUnset","($name)","",2],["fragment::__toString","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method___toString","()","",2],["nodeList::__construct","bolt\\dom\\nodeList","bolt\/dom\/nodeList.html#method___construct","($dom)","",2],["nodeList::__call","bolt\\dom\\nodeList","bolt\/dom\/nodeList.html#method___call","($name, $args)","",2],["nodeList::item","bolt\\dom\\nodeList","bolt\/dom\/nodeList.html#method_item","($pos)","",2],["nodeList::first","bolt\\dom\\nodeList","bolt\/dom\/nodeList.html#method_first","()","",2],["nodeList::last","bolt\\dom\\nodeList","bolt\/dom\/nodeList.html#method_last","()","",2],["nodeList::size","bolt\\dom\\nodeList","bolt\/dom\/nodeList.html#method_size","()","",2],["nodeList::html","bolt\\dom\\nodeList","bolt\/dom\/nodeList.html#method_html","()","",2],["nodeList::__toString","bolt\\dom\\nodeList","bolt\/dom\/nodeList.html#method___toString","()","",2],["base::param","bolt\\helpers\\base","bolt\/helpers\/base.html#method_param","(string $key, mixed $default = null, array $array, int $filter = null)","check for a variable in an array",2],["base::mergeArray","bolt\\helpers\\base","bolt\/helpers\/base.html#method_mergeArray","(array $a1, array $a2)","merge two arrays recursivly",2],["classes::getReflectionClass","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_getReflectionClass","(string $class)","get the reflection class",2],["classes::normalizeClassName","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_normalizeClassName","(string $class)","normalize a class name",2],["classes::getDeclaredClasses","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_getDeclaredClasses","()","get a list of declared classes",2],["classes::getClassImplements","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_getClassImplements","(string $name)","get classes that implement an interface",2],["classes::getSubClassOf","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_getSubClassOf","(string $name)","get classes that have class as a parent",2],["classes::classUses","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_classUses","($class, $autoload = true)","",2],["collection::each","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_each","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $cb, $data = array())","",2],["collection::first","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_first","()","",2],["collection::last","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_last","()","",2],["collection::filter","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_filter","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $cb)","",2],["collection::push","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_push","($item)","",2],["collection::shift","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_shift","()","",2],["collection::unshift","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_unshift","($item)","",2],["collection::getIterator","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_getIterator","()","",2],["collection::count","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_count","()","",2],["collection::jsonSerialize","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_jsonSerialize","()","",2],["collection::offsetSet","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_offsetSet","($offset, $value)","",2],["collection::offsetExists","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_offsetExists","($offset)","",2],["collection::offsetUnset","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_offsetUnset","($offset)","",2],["collection::offsetGet","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_offsetGet","($offset)","",2],["events::addListener","bolt\\helpers\\events","bolt\/helpers\/events.html#method_addListener","(string $type, <abbr title=\"bolt\\helpers\\Closure\">Closure<\/abbr> $cb, array $args = array())","add a listener",2],["events::removeListener","bolt\\helpers\\events","bolt\/helpers\/events.html#method_removeListener","(<a href=\"bolt\/helpers\/events\/listener.html\"><abbr title=\"bolt\\helpers\\events\\listener\">listener<\/abbr><\/a> $listener)","remove a listener from the object",2],["events::getListeners","bolt\\helpers\\events","bolt\/helpers\/events.html#method_getListeners","(string $type)","return all listeners for a given type",2],["events::getAllListeners","bolt\\helpers\\events","bolt\/helpers\/events.html#method_getAllListeners","()","return all listeners, grouped by type",2],["events::once","bolt\\helpers\\events","bolt\/helpers\/events.html#method_once","()","attach a handler that runs only once",2],["events::on","bolt\\helpers\\events","bolt\/helpers\/events.html#method_on","()","attach a listener",2],["events::off","bolt\\helpers\\events","bolt\/helpers\/events.html#method_off","()","remove a listener",2],["events::fire","bolt\\helpers\\events","bolt\/helpers\/events.html#method_fire","(string $type, array $data = array())","fire an event type",2],["events::executeListener","bolt\\helpers\\events","bolt\/helpers\/events.html#method_executeListener","(<a href=\"bolt\/helpers\/events\/listener.html\"><abbr title=\"bolt\\helpers\\events\\listener\">listener<\/abbr><\/a> $listener, $data = array())","",2],["event::__construct","bolt\\helpers\\events\\event","bolt\/helpers\/events\/event.html#method___construct","(<abbr title=\"bolt\\helpers\\events\\bolt\\helpers\\events\\listener\">listener<\/abbr> $listener, array $data = array())","Construct",2],["event::__get","bolt\\helpers\\events\\event","bolt\/helpers\/events\/event.html#method___get","($name)","return private variables",2],["event::data","bolt\\helpers\\events\\event","bolt\/helpers\/events\/event.html#method_data","(string $name, mixed $default = null)","return a data value or default",2],["event::arg","bolt\\helpers\\events\\event","bolt\/helpers\/events\/event.html#method_arg","(string $name, mixed $default = null)","return a arg value or default",2],["listener::__construct","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method___construct","($parent, $callback, $type, $args = array(), $context = false)","Construct",2],["listener::__get","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method___get","(string $name)","return private variables",2],["listener::once","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method_once","(bool $once)","set once variable",2],["listener::context","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method_context","(object $context)","context to execute callback in",2],["listener::detach","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method_detach","()","detach listener from parent",2],["listener::execute","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method_execute","(<a href=\"bolt\/helpers\/events\/event.html\"><abbr title=\"bolt\\helpers\\events\\event\">event<\/abbr><\/a> $e)","execute the event callback",2],["fs::path","bolt\\helpers\\fs","bolt\/helpers\/fs.html#method_path","()","",2],["fs::getRegexFiles","bolt\\helpers\\fs","bolt\/helpers\/fs.html#method_getRegexFiles","($path, $regex = &#039;^.+\\\\.php$&#039;)","",2],["fs::requireFromPath","bolt\\helpers\\fs","bolt\/helpers\/fs.html#method_requireFromPath","($path, $regex = &#039;^.+\\\\.php$&#039;)","",2],["fs::fs","bolt\\helpers\\fs","bolt\/helpers\/fs.html#method_fs","()","",2],["file::__toString","bolt\\helpers\\fs\\file","bolt\/helpers\/fs\/file.html#method___toString","()","",2],["glob::__construct","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method___construct","($path, $flags = FilesystemIterator::KEY_AS_PATHNAME)","",2],["glob::setPath","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_setPath","($path)","",2],["glob::getPath","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_getPath","($path)","",2],["glob::setFlags","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_setFlags","($flags)","",2],["glob::getIterator","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_getIterator","()","",2],["glob::asArray","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_asArray","()","",2],["glob::count","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_count","()","",2],["rdir::__construct","bolt\\helpers\\fs\\rdir","bolt\/helpers\/fs\/rdir.html#method___construct","($path, $regex = null)","",2],["rdir::asArray","bolt\\helpers\\fs\\rdir","bolt\/helpers\/fs\/rdir.html#method_asArray","()","",2],["models::__construct","bolt\\models","bolt\/models.html#method___construct","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app, array $config = array())","Construct",2],["models::getApp","bolt\\models","bolt\/models.html#method_getApp","()","return the base app",2],["models::getCollection","bolt\\models","bolt\/models.html#method_getCollection","(string $entity)","get a model collection object",2],["models::generateEntity","bolt\\models","bolt\/models.html#method_generateEntity","(string $entity, array $data)","generate an entity from",2],["models::getEntityManager","bolt\\models","bolt\/models.html#method_getEntityManager","()","return the entity manager refrance",2],["models::get","bolt\\models","bolt\/models.html#method_get","(string $name)","get a model",2],["models::find","bolt\\models","bolt\/models.html#method_find","(string $entity, mixed $id)","find an entity by primary key",2],["models::findAll","bolt\\models","bolt\/models.html#method_findAll","(string $entity)","find all entities",2],["models::findBy","bolt\\models","bolt\/models.html#method_findBy","(string $entity, array $criteria, array $order = null, int $limit = null, <abbr title=\"bolt\\init\">init<\/abbr> $offset = null)","find entities by search $criteria",2],["models::findOneBy","bolt\\models","bolt\/models.html#method_findOneBy","(string $entity, array $criteria, array $order = array())","find one enitity by query $criteria",2],["models::alias","bolt\\models","bolt\/models.html#method_alias","(string $name, string $entity)","register an entity alias",2],["models::getAliases","bolt\\models","bolt\/models.html#method_getAliases","()","get all registered aliases",2],["models::offsetSet","bolt\\models","bolt\/models.html#method_offsetSet","(string $name, string $class)","register an entity alias",2],["models::offsetExists","bolt\\models","bolt\/models.html#method_offsetExists","(string $name)","check to see if a registered alias exists",2],["models::offsetUnset","bolt\\models","bolt\/models.html#method_offsetUnset","(string $name)","remove an alias",2],["models::offsetGet","bolt\\models","bolt\/models.html#method_offsetGet","(string $name)","create a new model from given alias or entity class",2],["models::generate","bolt\\models","bolt\/models.html#method_generate","($class, array $data, <abbr title=\"bolt\\bolt\\models\">models<\/abbr> $manager = null)","generate an model",2],["collection::__construct","bolt\\models\\collection","bolt\/models\/collection.html#method___construct","(<abbr title=\"bolt\\models\\bolt\\models\">models<\/abbr> $manager, string $entity, array $items = array())","Constructor",2],["collection::push","bolt\\models\\collection","bolt\/models\/collection.html#method_push","(object $object)","",2],["collection::unshift","bolt\\models\\collection","bolt\/models\/collection.html#method_unshift","(object $object)","",2],["driver::__construct","bolt\\models\\driver","bolt\/models\/driver.html#method___construct","(<abbr title=\"bolt\\models\\bolt\\models\">models<\/abbr> $man)","Constructor",2],["driver::loadMetadataForClass","bolt\\models\\driver","bolt\/models\/driver.html#method_loadMetadataForClass","(string $className, <abbr title=\"Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata\">ClassMetadata<\/abbr> $metadata)","load metdata for a model",2],["driver::getAllClassNames","bolt\\models\\driver","bolt\/models\/driver.html#method_getAllClassNames","()","get all classnames for entities",2],["driver::isTransient","bolt\\models\\driver","bolt\/models\/driver.html#method_isTransient","(string $className)","is transient",2],["entity::getApp","bolt\\models\\entity","bolt\/models\/entity.html#method_getApp","()","get the base app",2],["entity::setManager","bolt\\models\\entity","bolt\/models\/entity.html#method_setManager","(<abbr title=\"bolt\\models\\bolt\\models\">models<\/abbr> $manager)","set the models manager",2],["entity::getManager","bolt\\models\\entity","bolt\/models\/entity.html#method_getManager","()","get the models manager",2],["entity::setLoaded","bolt\\models\\entity","bolt\/models\/entity.html#method_setLoaded","(bool $loaded)","set if the model is loaded",2],["entity::isLoaded","bolt\\models\\entity","bolt\/models\/entity.html#method_isLoaded","()","check if the model is loaded",2],["entity::loaded","bolt\\models\\entity","bolt\/models\/entity.html#method_loaded","()","check if the model is loaded",2],["entity::getValue","bolt\\models\\entity","bolt\/models\/entity.html#method_getValue","($var, $default = null)","",2],["entity::__get","bolt\\models\\entity","bolt\/models\/entity.html#method___get","($name)","get an attribute value",2],["entity::__set","bolt\\models\\entity","bolt\/models\/entity.html#method___set","(string $name, mixed $value)","set an attribute value",2],["proxy::__construct","bolt\\models\\proxy","bolt\/models\/proxy.html#method___construct","(<abbr title=\"bolt\\models\\bolt\\models\">models<\/abbr> $manager, string $class)","Constructor",2],["proxy::getClassName","bolt\\models\\proxy","bolt\/models\/proxy.html#method_getClassName","()","return the class name",2],["proxy::__call","bolt\\models\\proxy","bolt\/models\/proxy.html#method___call","(string $name, array $args)","proxy function class to manager",2],["stringArray::getSqlDeclaration","bolt\\models\\types\\stringArray","bolt\/models\/types\/stringArray.html#method_getSqlDeclaration","(array $fieldDeclaration, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["stringArray::convertToPHPValue","bolt\\models\\types\\stringArray","bolt\/models\/types\/stringArray.html#method_convertToPHPValue","($value, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["stringArray::convertToDatabaseValue","bolt\\models\\types\\stringArray","bolt\/models\/types\/stringArray.html#method_convertToDatabaseValue","($value, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["stringArray::getName","bolt\\models\\types\\stringArray","bolt\/models\/types\/stringArray.html#method_getName","()","",2],["timestamp::getSqlDeclaration","bolt\\models\\types\\timestamp","bolt\/models\/types\/timestamp.html#method_getSqlDeclaration","(array $fieldDeclaration, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["timestamp::convertToPHPValue","bolt\\models\\types\\timestamp","bolt\/models\/types\/timestamp.html#method_convertToPHPValue","($value, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["timestamp::convertToDatabaseValue","bolt\\models\\types\\timestamp","bolt\/models\/types\/timestamp.html#method_convertToDatabaseValue","($value, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["timestamp::getName","bolt\\models\\types\\timestamp","bolt\/models\/types\/timestamp.html#method_getName","()","",2],["plugin::plug","bolt\\plugin","bolt\/plugin.html#method_plug","(string $name, string|<abbr title=\"bolt\\callback\">callback<\/abbr> $class = null, array $config = array())","plug a new class into this parent class",2],["plugin::getPlugins","bolt\\plugin","bolt\/plugin.html#method_getPlugins","()","return all plugins",2],["plugin::pluginExists","bolt\\plugin","bolt\/plugin.html#method_pluginExists","(string $name, <abbr title=\"bolt\\Closure\">Closure<\/abbr> $cb = null)","does plugin exist",2],["plugin::plugin","bolt\\plugin","bolt\/plugin.html#method_plugin","(string $name)","get a plugin instance",2],["plugin::unplug","bolt\\plugin","bolt\/plugin.html#method_unplug","(string $name)","unplug a plugin",2],["plugin::offsetSet","bolt\\plugin","bolt\/plugin.html#method_offsetSet","(string $name, string $class)","set offset",2],["plugin::offsetExists","bolt\\plugin","bolt\/plugin.html#method_offsetExists","(string $name)","offset get",2],["plugin::offsetUnset","bolt\\plugin","bolt\/plugin.html#method_offsetUnset","(string $name)","unplug",2],["plugin::offsetGet","bolt\\plugin","bolt\/plugin.html#method_offsetGet","(string $name)","get a plugin",2],["factory::factory","bolt\\plugin\\factory","bolt\/plugin\/factory.html#method_factory","($parent, $config = array())","factory function interface",2],["render::__construct","bolt\\render","bolt\/render.html#method___construct","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app)","",2],["render::engine","bolt\\render","bolt\/render.html#method_engine","(string $ext, string $class)","register a new engine",2],["render::hasEngine","bolt\\render","bolt\/render.html#method_hasEngine","($ext, $mustCompile = null)","",2],["render::getEngines","bolt\\render","bolt\/render.html#method_getEngines","()","",2],["render::getEngine","bolt\\render","bolt\/render.html#method_getEngine","($ext)","",2],["render::string","bolt\\render","bolt\/render.html#method_string","($ext, $str, $vars = array())","",2],["render::file","bolt\\render","bolt\/render.html#method_file","($file, $vars = array())","",2],["base::canCompile","bolt\\render\\base","bolt\/render\/base.html#method_canCompile","()","",2],["base::__construct","bolt\\render\\base","bolt\/render\/base.html#method___construct","(<abbr title=\"bolt\\render\\bolt\\render\">render<\/abbr> $manager)","",2],["base::render","bolt\\render\\base","bolt\/render\/base.html#method_render","(string $str, array $vars = array())","render abstract",2],["base::renderFile","bolt\\render\\base","bolt\/render\/base.html#method_renderFile","($file, $vars = array())","",2],["base::renderCompiled","bolt\\render\\base","bolt\/render\/base.html#method_renderCompiled","($compiled, $vars = array())","",2],["dom::compile","bolt\\render\\dom","bolt\/render\/dom.html#method_compile","()","compile abstract",2],["dom::render","bolt\\render\\dom","bolt\/render\/dom.html#method_render","(string $str, array $vars = array())","render abstract",2],["handlebars::canCompile","bolt\\render\\handlebars","bolt\/render\/handlebars.html#method_canCompile","()","",2],["handlebars::compile","bolt\\render\\handlebars","bolt\/render\/handlebars.html#method_compile","($str)","compile to freezable class",2],["handlebars::render","bolt\\render\\handlebars","bolt\/render\/handlebars.html#method_render","(string $str, array $vars = array())","render a handlebar template",2],["handlebars::renderCompiled","bolt\\render\\handlebars","bolt\/render\/handlebars.html#method_renderCompiled","($compiled, $vars = array())","",2],["xml::compile","bolt\\render\\xml","bolt\/render\/xml.html#method_compile","()","compile the dom doc to serializeable object",2],["xml::render","bolt\\render\\xml","bolt\/render\/xml.html#method_render","(string $data, array $vars = array())","render abstract",2],["generate::__construct","bolt\\render\\xml\\generate","bolt\/render\/xml\/generate.html#method___construct","($data)","",2],["generate::getData","bolt\\render\\xml\\generate","bolt\/render\/xml\/generate.html#method_getData","()","",2],["generate::render","bolt\\render\\xml\\generate","bolt\/render\/xml\/generate.html#method_render","()","",2],["generate::__toString","bolt\\render\\xml\\generate","bolt\/render\/xml\/generate.html#method___toString","()","",2],["curl::__construct","bolt\\source\\curl","bolt\/source\/curl.html#method___construct","(<abbr title=\"bolt\\source\\bolt\\application\">application<\/abbr> $app, $config = array())","",2],["curl::getClient","bolt\\source\\curl","bolt\/source\/curl.html#method_getClient","()","",2],["curl::getModelEntityManager","bolt\\source\\curl","bolt\/source\/curl.html#method_getModelEntityManager","(<abbr title=\"bolt\\source\\bolt\\models\">models<\/abbr> $manager, <abbr title=\"bolt\\source\\bolt\\models\\driver\">driver<\/abbr> $driver)","",2],["curl::getRepository","bolt\\source\\curl","bolt\/source\/curl.html#method_getRepository","($entity)","",2],["curl::__call","bolt\\source\\curl","bolt\/source\/curl.html#method___call","($name, $args)","",2],["repository::__construct","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method___construct","(<abbr title=\"bolt\\source\\curl\\bolt\\source\\curl\">curl<\/abbr> $curl, $entity, <abbr title=\"bolt\\source\\curl\\bolt\\models\">models<\/abbr> $manager, <abbr title=\"bolt\\source\\curl\\bolt\\models\\driver\">driver<\/abbr> $driver)","Constructor",2],["repository::generateEntity","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_generateEntity","(array $item)","generate a class of $entity from the provided data",2],["repository::find","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_find","(mixed $id)","find an entity",2],["repository::findBy","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_findBy","(array $query, array $order = array(), int $limit = false, int $offset)","find an entity by query",2],["repository::findOneBy","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_findOneBy","(array $query, array $order = array())","find one entity by query",2],["database::__construct","bolt\\source\\database","bolt\/source\/database.html#method___construct","(<abbr title=\"bolt\\source\\bolt\\application\">application<\/abbr> $app, $config = array())","",2],["database::getHandle","bolt\\source\\database","bolt\/source\/database.html#method_getHandle","()","",2],["database::getModelEntityManager","bolt\\source\\database","bolt\/source\/database.html#method_getModelEntityManager","(<abbr title=\"bolt\\source\\bolt\\models\">models<\/abbr> $manager, <abbr title=\"bolt\\source\\bolt\\models\\driver\">driver<\/abbr> $driver)","",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']