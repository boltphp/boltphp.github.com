var search_data = {
    'index': {
        'searchIndex': ["","bolt","bolt\\cli","bolt\\client","bolt\\dom","bolt\\dom\\element","bolt\\dom\\traits","bolt\\exceptions","bolt\\helpers","bolt\\helpers\\events","bolt\\helpers\\fs","bolt\\http","bolt\\http\\assets","bolt\\http\\assets\\filters","bolt\\http\\controller","bolt\\http\\middleware","bolt\\http\\response","bolt\\http\\response\\format","bolt\\http\\router","bolt\\http\\session","bolt\\http\\session\\handler","bolt\\http\\views","bolt\\models","bolt\\models\\functions","bolt\\models\\types","bolt\\plugin","bolt\\render","bolt\\render\\xml","bolt\\source","bolt\\source\\curl","b","bolt","bolt\\application","bolt\\base","bolt\\cli","bolt\\cli\\command","bolt\\client","bolt\\client\\command","bolt\\client\\compile","bolt\\client\\models","bolt\\config","bolt\\dom","bolt\\dom\\collection","bolt\\dom\\document","bolt\\dom\\element","bolt\\dom\\element\\a","bolt\\dom\\element\\code","bolt\\dom\\element\\script","bolt\\dom\\element\\time","bolt\\dom\\fragment","bolt\\dom\\traits\\queryable","bolt\\exceptions\\resourcenotfoundexception","bolt\\helpers\\base","bolt\\helpers\\classes","bolt\\helpers\\collection","bolt\\helpers\\events","bolt\\helpers\\events\\event","bolt\\helpers\\events\\listener","bolt\\helpers\\fs","bolt\\helpers\\fs\\file","bolt\\helpers\\fs\\glob","bolt\\helpers\\fs\\rdir","bolt\\helpers\\loggable","bolt\\http","bolt\\http\\assets","bolt\\http\\assets\\filters\\cssrewrite","bolt\\http\\assets\\group","bolt\\http\\assets\\middleware","bolt\\http\\controller","bolt\\http\\controller\\closure","bolt\\http\\controller\\route","bolt\\http\\middleware","bolt\\http\\middleware\\closure","bolt\\http\\middleware\\direct","bolt\\http\\request","bolt\\http\\response","bolt\\http\\response\\format","bolt\\http\\response\\format\\css","bolt\\http\\response\\format\\face","bolt\\http\\response\\format\\generic","bolt\\http\\response\\format\\html","bolt\\http\\response\\format\\js","bolt\\http\\response\\format\\json","bolt\\http\\response\\format\\xhr","bolt\\http\\response\\format\\xml","bolt\\http\\response\\redirect","bolt\\http\\router","bolt\\http\\router\\collection","bolt\\http\\router\\face","bolt\\http\\router\\route","bolt\\http\\session","bolt\\http\\session\\handler\\cookie","bolt\\http\\session\\middleware","bolt\\http\\session\\store","bolt\\http\\views","bolt\\http\\views\\compiled","bolt\\http\\views\\face","bolt\\http\\views\\file","bolt\\log","bolt\\models","bolt\\models\\collection","bolt\\models\\driver","bolt\\models\\entity","bolt\\models\\functions\\findinset","bolt\\models\\functions\\fromunixtime","bolt\\models\\proxy","bolt\\models\\types\\stringarray","bolt\\models\\types\\timestamp","bolt\\plugin","bolt\\plugin\\factory","bolt\\plugin\\singleton","bolt\\render","bolt\\render\\base","bolt\\render\\dom","bolt\\render\\handlebars","bolt\\render\\renderinterface","bolt\\render\\xml","bolt\\render\\xml\\generate","bolt\\source\\curl","bolt\\source\\curl\\repository","bolt\\source\\database","bolt\\source\\event","bolt\\source\\mongodb","bolt\\source\\sourceinterface","bolt::instance","bolt::__callstatic","bolt::init","bolt\\application::__construct","bolt\\application::autoload","bolt\\application::getbootstrapdir","bolt\\application::bootstrap","bolt\\application::getcompiled","bolt\\application::getautoload","bolt\\application::env","bolt\\application::hasrun","bolt\\application::getroot","bolt\\application::setroot","bolt\\application::path","bolt\\application::load","bolt\\application::getcomposerfile","bolt\\application::run","bolt\\base::__construct","bolt\\base::app","bolt\\base::env","bolt\\base::guid","bolt\\base::__call","bolt\\base::helpers","bolt\\base::gethelpers","bolt\\base::exepction","bolt\\cli::__construct","bolt\\cli::on","bolt\\cli::getapp","bolt\\cli::getconsole","bolt\\cli::getinput","bolt\\cli::getoutput","bolt\\cli::execute","bolt\\cli\\command::__construct","bolt\\cli\\command::__get","bolt\\cli\\command::get","bolt\\cli\\command::progressbar","bolt\\cli\\command::ask","bolt\\cli\\command::askquestion","bolt\\cli\\command::askconfirmation","bolt\\cli\\command::question","bolt\\cli\\command::confirmation","bolt\\cli\\command::choice","bolt\\cli\\command::setname","bolt\\cli\\command::setaliases","bolt\\cli\\command::writeln","bolt\\cli\\command::writeerror","bolt\\cli\\command::arg","bolt\\cli\\command::opt","bolt\\cli\\command::init","bolt\\cli\\command::setup","bolt\\cli\\command::execute","bolt\\client::bind","bolt\\client\\compile::getconfigure","bolt\\client\\compile::init","bolt\\client\\compile::generate","bolt\\client\\compile::clean","bolt\\client\\compile::savecompileloader","bolt\\client\\compile::makedir","bolt\\client\\models::setup","bolt\\client\\models::schemacreate","bolt\\client\\models::schemaupdate","bolt\\client\\models::schemadrop","bolt\\config::__construct","bolt\\config::oncompile","bolt\\config::register","bolt\\config::getregistered","bolt\\config::__get","bolt\\config::has","bolt\\config::all","bolt\\config::get","bolt\\config::set","bolt\\config::remove","bolt\\config::exists","bolt\\config::getiterator","bolt\\config::offsetset","bolt\\config::offsetexists","bolt\\config::offsetunset","bolt\\config::offsetget","bolt\\dom::document","bolt\\dom::fragment","bolt\\dom::element","bolt\\dom::createdocument","bolt\\dom::createfragment","bolt\\dom::createelement","bolt\\dom\\collection::__construct","bolt\\dom\\collection::__get","bolt\\dom\\collection::__set","bolt\\dom\\collection::__call","bolt\\dom\\document::__construct","bolt\\dom\\document::__get","bolt\\dom\\document::destroychild","bolt\\dom\\document::html","bolt\\dom\\document::createelement","bolt\\dom\\document::create","bolt\\dom\\document::createelementnative","bolt\\dom\\document::append","bolt\\dom\\document::savehtml","bolt\\dom\\document::gethtml","bolt\\dom\\document::sethtml","bolt\\dom\\document::import","bolt\\dom\\document::cleanelement","bolt\\dom\\document::find","bolt\\dom\\document::xpath","bolt\\dom\\document::__tostring","bolt\\dom\\element::__construct","bolt\\dom\\element::__destruct","bolt\\dom\\element::init","bolt\\dom\\element::__get","bolt\\dom\\element::__call","bolt\\dom\\element::create","bolt\\dom\\element::createandappend","bolt\\dom\\element::append","bolt\\dom\\element::appendchild","bolt\\dom\\element::remove","bolt\\dom\\element::children","bolt\\dom\\element::clear","bolt\\dom\\element::html","bolt\\dom\\element::sethtml","bolt\\dom\\element::gethtml","bolt\\dom\\element::find","bolt\\dom\\element::attr","bolt\\dom\\element::insertbefore","bolt\\dom\\element::replace","bolt\\dom\\element::addclass","bolt\\dom\\element::removeclass","bolt\\dom\\element::setstyle","bolt\\dom\\element\\script::async","bolt\\dom\\element\\script::defer","bolt\\dom\\element\\time::setdatetime","bolt\\dom\\fragment::__construct","bolt\\dom\\fragment::sethtml","bolt\\dom\\fragment::gethtml","bolt\\dom\\fragment::appendchild","bolt\\dom\\fragment::savehtml","bolt\\dom\\fragment::children","bolt\\dom\\fragment::find","bolt\\dom\\traits\\queryable::offsetexists","bolt\\dom\\traits\\queryable::offsetget","bolt\\dom\\traits\\queryable::offsetset","bolt\\dom\\traits\\queryable::offsetunset","bolt\\helpers\\base::param","bolt\\helpers\\base::mergearray","bolt\\helpers\\classes::getreflectionclass","bolt\\helpers\\classes::normalizeclassname","bolt\\helpers\\classes::getdeclaredclasses","bolt\\helpers\\classes::getclassimplements","bolt\\helpers\\classes::getsubclassof","bolt\\helpers\\classes::classuses","bolt\\helpers\\collection::__construct","bolt\\helpers\\collection::each","bolt\\helpers\\collection::first","bolt\\helpers\\collection::last","bolt\\helpers\\collection::filter","bolt\\helpers\\collection::splice","bolt\\helpers\\collection::slice","bolt\\helpers\\collection::map","bolt\\helpers\\collection::diff","bolt\\helpers\\collection::intersect","bolt\\helpers\\collection::push","bolt\\helpers\\collection::shift","bolt\\helpers\\collection::pop","bolt\\helpers\\collection::unshift","bolt\\helpers\\collection::shuffle","bolt\\helpers\\collection::getiterator","bolt\\helpers\\collection::count","bolt\\helpers\\collection::jsonserialize","bolt\\helpers\\collection::offsetset","bolt\\helpers\\collection::offsetexists","bolt\\helpers\\collection::offsetunset","bolt\\helpers\\collection::offsetget","bolt\\helpers\\collection::toarray","bolt\\helpers\\events::addlistener","bolt\\helpers\\events::removelistener","bolt\\helpers\\events::getlisteners","bolt\\helpers\\events::getalllisteners","bolt\\helpers\\events::once","bolt\\helpers\\events::on","bolt\\helpers\\events::off","bolt\\helpers\\events::fire","bolt\\helpers\\events::executelistener","bolt\\helpers\\events\\event::__construct","bolt\\helpers\\events\\event::__get","bolt\\helpers\\events\\event::data","bolt\\helpers\\events\\event::arg","bolt\\helpers\\events\\listener::__construct","bolt\\helpers\\events\\listener::__get","bolt\\helpers\\events\\listener::once","bolt\\helpers\\events\\listener::context","bolt\\helpers\\events\\listener::detach","bolt\\helpers\\events\\listener::execute","bolt\\helpers\\fs::path","bolt\\helpers\\fs::getregexfiles","bolt\\helpers\\fs::requirefrompath","bolt\\helpers\\fs::fs","bolt\\helpers\\fs\\file::__tostring","bolt\\helpers\\fs\\glob::__construct","bolt\\helpers\\fs\\glob::setpath","bolt\\helpers\\fs\\glob::getpath","bolt\\helpers\\fs\\glob::setflags","bolt\\helpers\\fs\\glob::getiterator","bolt\\helpers\\fs\\glob::asarray","bolt\\helpers\\fs\\glob::count","bolt\\helpers\\fs\\rdir::__construct","bolt\\helpers\\fs\\rdir::asarray","bolt\\helpers\\loggable::setloginstance","bolt\\helpers\\loggable::getloginstance","bolt\\helpers\\loggable::log","bolt\\http::start","bolt\\http::__construct","bolt\\http::__get","bolt\\http::__call","bolt\\http::getapp","bolt\\http::getrequest","bolt\\http::setrequest","bolt\\http::getresponse","bolt\\http::setresponse","bolt\\http::path","bolt\\http::load","bolt\\http::bind","bolt\\http::getmiddleware","bolt\\http::run","bolt\\http::execute","bolt\\http::runmiddleware","bolt\\http::runmiddlewarebyname","bolt\\http\\assets::__construct","bolt\\http\\assets::getconfig","bolt\\http\\assets::setcache","bolt\\http\\assets::getcache","bolt\\http\\assets::getcompiledfileinfo","bolt\\http\\assets::getcompiledfile","bolt\\http\\assets::glob","bolt\\http\\assets::file","bolt\\http\\assets::set","bolt\\http\\assets::collection","bolt\\http\\assets::factory","bolt\\http\\assets::url","bolt\\http\\assets::getroot","bolt\\http\\assets::getmanager","bolt\\http\\assets::__get","bolt\\http\\assets::path","bolt\\http\\assets::getfilters","bolt\\http\\assets::compile","bolt\\http\\assets::iscompiling","bolt\\http\\assets::oncompile","bolt\\http\\assets::compilecollection","bolt\\http\\assets\\filters\\cssrewrite::__construct","bolt\\http\\assets\\filters\\cssrewrite::filterload","bolt\\http\\assets\\filters\\cssrewrite::filterdump","bolt\\http\\assets\\group::__construct","bolt\\http\\assets\\group::gettype","bolt\\http\\assets\\group::getname","bolt\\http\\assets\\group::count","bolt\\http\\assets\\group::add","bolt\\http\\assets\\group::getcombourl","bolt\\http\\assets\\group::appendtodom","bolt\\http\\assets\\group::getiterator","bolt\\http\\assets\\middleware::init","bolt\\http\\assets\\middleware::before","bolt\\http\\controller::__construct","bolt\\http\\controller::init","bolt\\http\\controller::before","bolt\\http\\controller::after","bolt\\http\\controller::uselayout","bolt\\http\\controller::getuselayout","bolt\\http\\controller::__get","bolt\\http\\controller::__set","bolt\\http\\controller::__isset","bolt\\http\\controller::getparameters","bolt\\http\\controller::view","bolt\\http\\controller\\closure::build","bolt\\http\\controller\\route::__construct","bolt\\http\\controller\\route::__get","bolt\\http\\controller\\route::setresponse","bolt\\http\\controller\\route::exception","bolt\\http\\controller\\route::format","bolt\\http\\controller\\route::build","bolt\\http\\controller\\route::run","bolt\\http\\middleware::__construct","bolt\\http\\middleware::init","bolt\\http\\middleware::__get","bolt\\http\\middleware::execute","bolt\\http\\middleware\\closure::setevent","bolt\\http\\middleware\\closure::setclosure","bolt\\http\\middleware\\closure::before","bolt\\http\\middleware\\closure::handle","bolt\\http\\middleware\\closure::after","bolt\\http\\middleware\\direct::before","bolt\\http\\request::__construct","bolt\\http\\request::getcontext","bolt\\http\\response::__construct","bolt\\http\\response::guid","bolt\\http\\response::format","bolt\\http\\response::setcookie","bolt\\http\\response::getformat","bolt\\http\\response::hasformat","bolt\\http\\response::setlayout","bolt\\http\\response::getlayout","bolt\\http\\response::setexception","bolt\\http\\response::hasexception","bolt\\http\\response::getexception","bolt\\http\\response::isreadytosend","bolt\\http\\response::setheader","bolt\\http\\response::readytosend","bolt\\http\\response::prepare","bolt\\http\\response\\format::__construct","bolt\\http\\response\\format::__call","bolt\\http\\response\\format::__get","bolt\\http\\response\\format::setheader","bolt\\http\\response\\format::setcontent","bolt\\http\\response\\format::getcontent","bolt\\http\\response\\format::getcontenttype","bolt\\http\\response\\format::__invoke","bolt\\http\\response\\format\\json::format","bolt\\http\\response\\format\\xhr::format","bolt\\http\\response\\format\\xml::format","bolt\\http\\response\\redirect::__construct","bolt\\http\\response\\redirect::seturl","bolt\\http\\router::__construct","bolt\\http\\router::oncompile","bolt\\http\\router::getcollection","bolt\\http\\router::__call","bolt\\http\\router::add","bolt\\http\\router::getbyname","bolt\\http\\router::match","bolt\\http\\router::loadfromcontrollers","bolt\\http\\router\\collection::create","bolt\\http\\router\\collection::__set_state","bolt\\http\\router\\route::create","bolt\\http\\router\\route::__set_state","bolt\\http\\router\\route::setname","bolt\\http\\router\\route::getname","bolt\\http\\router\\route::setcontroller","bolt\\http\\router\\route::getcontroller","bolt\\http\\router\\route::setrequire","bolt\\http\\router\\route::setaction","bolt\\http\\router\\route::setformats","bolt\\http\\router\\route::compile","bolt\\http\\session::__construct","bolt\\http\\session::gethttp","bolt\\http\\session::getname","bolt\\http\\session::start","bolt\\http\\session::destroy","bolt\\http\\session::set","bolt\\http\\session::__get","bolt\\http\\session::__set","bolt\\http\\session::__isset","bolt\\http\\session::__call","bolt\\http\\session::offsetget","bolt\\http\\session::offsetset","bolt\\http\\session::offsetunset","bolt\\http\\session::offsetexists","bolt\\http\\session\\handler\\cookie::__construct","bolt\\http\\session\\handler\\cookie::setmanager","bolt\\http\\session\\handler\\cookie::open","bolt\\http\\session\\handler\\cookie::close","bolt\\http\\session\\handler\\cookie::read","bolt\\http\\session\\handler\\cookie::encodedata","bolt\\http\\session\\handler\\cookie::decodedata","bolt\\http\\session\\handler\\cookie::write","bolt\\http\\session\\handler\\cookie::destroy","bolt\\http\\session\\handler\\cookie::gc","bolt\\http\\session\\middleware::before","bolt\\http\\session\\middleware::after","bolt\\http\\session\\store::__construct","bolt\\http\\session\\store::start","bolt\\http\\session\\store::isstarted","bolt\\http\\session\\store::getid","bolt\\http\\session\\store::setid","bolt\\http\\session\\store::getname","bolt\\http\\session\\store::setname","bolt\\http\\session\\store::regenerate","bolt\\http\\session\\store::generateid","bolt\\http\\session\\store::destroy","bolt\\http\\session\\store::save","bolt\\http\\session\\store::clear","bolt\\http\\session\\store::getbag","bolt\\http\\session\\store::registerbag","bolt\\http\\session\\store::setmetadatabag","bolt\\http\\session\\store::getmetadatabag","bolt\\http\\views::__construct","bolt\\http\\views::dir","bolt\\http\\views::engine","bolt\\http\\views::getengines","bolt\\http\\views::getdirs","bolt\\http\\views::find","bolt\\http\\views::exists","bolt\\http\\views::create","bolt\\http\\views::oncompile","bolt\\http\\views\\compiled::__construct","bolt\\http\\views\\compiled::render","bolt\\http\\views\\compiled::__invoke","bolt\\http\\views\\compiled::__tostring","bolt\\http\\views\\face::__invoke","bolt\\http\\views\\face::render","bolt\\http\\views\\face::__tostring","bolt\\http\\views\\file::__construct","bolt\\http\\views\\file::render","bolt\\http\\views\\file::__invoke","bolt\\http\\views\\file::__tostring","bolt\\log::factory","bolt\\log::__construct","bolt\\log::getinstance","bolt\\log::getname","bolt\\log::level","bolt\\log::__call","bolt\\log::handler","bolt\\log::processor","bolt\\models::__construct","bolt\\models::getsource","bolt\\models::getapp","bolt\\models::getcollection","bolt\\models::generateentity","bolt\\models::getentitymanager","bolt\\models::loadfromdirectories","bolt\\models::get","bolt\\models::find","bolt\\models::findall","bolt\\models::findby","bolt\\models::findoneby","bolt\\models::save","bolt\\models::delete","bolt\\models::getrepoforentity","bolt\\models::create","bolt\\models::alias","bolt\\models::getaliases","bolt\\models::offsetset","bolt\\models::offsetexists","bolt\\models::offsetunset","bolt\\models::offsetget","bolt\\models::generate","bolt\\models\\collection::__construct","bolt\\models\\collection::settotal","bolt\\models\\collection::gettotal","bolt\\models\\collection::setoffset","bolt\\models\\collection::getoffset","bolt\\models\\collection::setlimit","bolt\\models\\collection::getlimit","bolt\\models\\collection::getcurrentpage","bolt\\models\\collection::getnumpages","bolt\\models\\collection::getlastpage","bolt\\models\\collection::getfirstpage","bolt\\models\\collection::haspage","bolt\\models\\collection::haspages","bolt\\models\\collection::hasnextpage","bolt\\models\\collection::hasprevpage","bolt\\models\\collection::getpagerange","bolt\\models\\collection::__get","bolt\\models\\collection::__set","bolt\\models\\collection::push","bolt\\models\\collection::unshift","bolt\\models\\collection::asarray","bolt\\models\\driver::__construct","bolt\\models\\driver::loadmetadataforclass","bolt\\models\\driver::getallclassnames","bolt\\models\\driver::istransient","bolt\\models\\entity::struct","bolt\\models\\entity::getapp","bolt\\models\\entity::setmanager","bolt\\models\\entity::getmanager","bolt\\models\\entity::setloaded","bolt\\models\\entity::isloaded","bolt\\models\\entity::loaded","bolt\\models\\entity::getvalue","bolt\\models\\entity::__get","bolt\\models\\entity::__set","bolt\\models\\entity::has","bolt\\models\\entity::__isset","bolt\\models\\entity::set","bolt\\models\\entity::afternormalize","bolt\\models\\entity::beforenormalize","bolt\\models\\entity::normalize","bolt\\models\\entity::asarray","bolt\\models\\entity::jsonserialize","bolt\\models\\entity::__tostring","bolt\\models\\entity::save","bolt\\models\\entity::delete","bolt\\models\\entity::getprimarykey","bolt\\models\\functions\\findinset::parse","bolt\\models\\functions\\findinset::getsql","bolt\\models\\functions\\fromunixtime::parse","bolt\\models\\functions\\fromunixtime::getsql","bolt\\models\\proxy::__construct","bolt\\models\\proxy::getclassname","bolt\\models\\proxy::__call","bolt\\models\\types\\stringarray::getsqldeclaration","bolt\\models\\types\\stringarray::converttophpvalue","bolt\\models\\types\\stringarray::converttodatabasevalue","bolt\\models\\types\\stringarray::getname","bolt\\models\\types\\timestamp::getsqldeclaration","bolt\\models\\types\\timestamp::converttophpvalue","bolt\\models\\types\\timestamp::converttodatabasevalue","bolt\\models\\types\\timestamp::getname","bolt\\plugin::plug","bolt\\plugin::getplugins","bolt\\plugin::pluginexists","bolt\\plugin::plugin","bolt\\plugin::unplug","bolt\\plugin::offsetset","bolt\\plugin::offsetexists","bolt\\plugin::offsetunset","bolt\\plugin::offsetget","bolt\\plugin\\factory::factory","bolt\\render::__construct","bolt\\render::engine","bolt\\render::hasengine","bolt\\render::getengines","bolt\\render::getengine","bolt\\render::getengineinstance","bolt\\render::string","bolt\\render::file","bolt\\render\\base::cancompile","bolt\\render\\base::__construct","bolt\\render\\base::render","bolt\\render\\base::renderfile","bolt\\render\\base::rendercompiled","bolt\\render\\dom::compile","bolt\\render\\dom::render","bolt\\render\\dom::rendercompiled","bolt\\render\\handlebars::cancompile","bolt\\render\\handlebars::getdelimiters","bolt\\render\\handlebars::compile","bolt\\render\\handlebars::render","bolt\\render\\handlebars::rendercompiled","bolt\\render\\renderinterface::cancompile","bolt\\render\\renderinterface::render","bolt\\render\\xml::render","bolt\\render\\xml\\generate::__construct","bolt\\render\\xml\\generate::getdata","bolt\\render\\xml\\generate::render","bolt\\render\\xml\\generate::__tostring","bolt\\source\\curl::__construct","bolt\\source\\curl::getapp","bolt\\source\\curl::getclient","bolt\\source\\curl::getmodelentitymanager","bolt\\source\\curl::getrepository","bolt\\source\\curl::persist","bolt\\source\\curl::__call","bolt\\source\\curl\\repository::__construct","bolt\\source\\curl\\repository::getrequesturi","bolt\\source\\curl\\repository::gettransform","bolt\\source\\curl\\repository::generateentity","bolt\\source\\curl\\repository::find","bolt\\source\\curl\\repository::findby","bolt\\source\\curl\\repository::findoneby","bolt\\source\\curl\\repository::persist","bolt\\source\\curl\\repository::flush","bolt\\source\\database::__construct","bolt\\source\\database::gethandle","bolt\\source\\database::getconfig","bolt\\source\\database::getmodelentitymanager","bolt\\source\\database::__call","bolt\\source\\event::__construct","bolt\\source\\event::postload","bolt\\source\\event::getsubscribedevents","bolt\\source\\mongodb::__construct","bolt\\source\\mongodb::gethandle","bolt\\source\\mongodb::getmodelentitymanager"],
        'info': [["","",".html","","",3],["bolt","","bolt.html","","",3],["bolt\\cli","","bolt\/cli.html","","",3],["bolt\\client","","bolt\/client.html","","",3],["bolt\\dom","","bolt\/dom.html","","",3],["bolt\\dom\\element","","bolt\/dom\/element.html","","",3],["bolt\\dom\\traits","","bolt\/dom\/traits.html","","",3],["bolt\\exceptions","","bolt\/exceptions.html","","",3],["bolt\\helpers","","bolt\/helpers.html","","",3],["bolt\\helpers\\events","","bolt\/helpers\/events.html","","",3],["bolt\\helpers\\fs","","bolt\/helpers\/fs.html","","",3],["bolt\\http","","bolt\/http.html","","",3],["bolt\\http\\assets","","bolt\/http\/assets.html","","",3],["bolt\\http\\assets\\filters","","bolt\/http\/assets\/filters.html","","",3],["bolt\\http\\controller","","bolt\/http\/controller.html","","",3],["bolt\\http\\middleware","","bolt\/http\/middleware.html","","",3],["bolt\\http\\response","","bolt\/http\/response.html","","",3],["bolt\\http\\response\\format","","bolt\/http\/response\/format.html","","",3],["bolt\\http\\router","","bolt\/http\/router.html","","",3],["bolt\\http\\session","","bolt\/http\/session.html","","",3],["bolt\\http\\session\\handler","","bolt\/http\/session\/handler.html","","",3],["bolt\\http\\views","","bolt\/http\/views.html","","",3],["bolt\\models","","bolt\/models.html","","",3],["bolt\\models\\functions","","bolt\/models\/functions.html","","",3],["bolt\\models\\types","","bolt\/models\/types.html","","",3],["bolt\\plugin","","bolt\/plugin.html","","",3],["bolt\\render","","bolt\/render.html","","",3],["bolt\\render\\xml","","bolt\/render\/xml.html","","",3],["bolt\\source","","bolt\/source.html","","",3],["bolt\\source\\curl","","bolt\/source\/curl.html","","",3],["b","","b.html"," < bolt","shortcut to bolt",1],["bolt","","bolt.html","","",1],["application","bolt","bolt\/application.html"," < plugin","Base bolt applicatin class",1],["base","bolt","bolt\/base.html","","",1],["cli","bolt","bolt\/cli.html"," < plugin","CLI client plugin",1],["command","bolt\\cli","bolt\/cli\/command.html"," < Command","",1],["client","bolt","bolt\/client.html","","bolt client",1],["command","bolt\\client","bolt\/client\/command.html"," < command","",1],["compile","bolt\\client","bolt\/client\/compile.html"," < command","",1],["models","bolt\\client","bolt\/client\/models.html"," < command","",1],["config","bolt","bolt\/config.html","","Base configuration manager",1],["dom","bolt","bolt\/dom.html","","",1],["collection","bolt\\dom","bolt\/dom\/collection.html"," < collection","",1],["document","bolt\\dom","bolt\/dom\/document.html"," < DOMDocument","",1],["element","bolt\\dom","bolt\/dom\/element.html","","",1],["a","bolt\\dom\\element","bolt\/dom\/element\/a.html"," < element","anchor tag",1],["code","bolt\\dom\\element","bolt\/dom\/element\/code.html"," < element","code tag",1],["script","bolt\\dom\\element","bolt\/dom\/element\/script.html"," < element","code tag",1],["time","bolt\\dom\\element","bolt\/dom\/element\/time.html"," < element","time tag",1],["fragment","bolt\\dom","bolt\/dom\/fragment.html"," < document","",1],["queryable","bolt\\dom\\traits","bolt\/dom\/traits\/queryable.html","","",1],["ResourceNotFoundException","bolt\\exceptions","bolt\/exceptions\/ResourceNotFoundException.html"," < Exception","",1],["base","bolt\\helpers","bolt\/helpers\/base.html","","base helpers class",1],["classes","bolt\\helpers","bolt\/helpers\/classes.html","","classes helper",1],["collection","bolt\\helpers","bolt\/helpers\/collection.html","","Collection",1],["events","bolt\\helpers","bolt\/helpers\/events.html","","Add events handling to an object",1],["event","bolt\\helpers\\events","bolt\/helpers\/events\/event.html","","Event Object",1],["listener","bolt\\helpers\\events","bolt\/helpers\/events\/listener.html","","event listener",1],["fs","bolt\\helpers","bolt\/helpers\/fs.html","","",1],["file","bolt\\helpers\\fs","bolt\/helpers\/fs\/file.html"," < SplFileObject","",1],["glob","bolt\\helpers\\fs","bolt\/helpers\/fs\/glob.html","","",1],["rdir","bolt\\helpers\\fs","bolt\/helpers\/fs\/rdir.html","","",1],["loggable","bolt\\helpers","bolt\/helpers\/loggable.html","","",1],["http","bolt","bolt\/http.html"," < plugin","Base http (http) handler",1],["assets","bolt\\http","bolt\/http\/assets.html","","asset manager",1],["cssRewrite","bolt\\http\\assets\\filters","bolt\/http\/assets\/filters\/cssRewrite.html"," < BaseCssFilter","",1],["group","bolt\\http\\assets","bolt\/http\/assets\/group.html","","",1],["middleware","bolt\\http\\assets","bolt\/http\/assets\/middleware.html"," < middleware","",1],["controller","bolt\\http","bolt\/http\/controller.html","","base controller class",1],["closure","bolt\\http\\controller","bolt\/http\/controller\/closure.html"," < route","closure controller class",1],["route","bolt\\http\\controller","bolt\/http\/controller\/route.html"," < controller","route controller",1],["middleware","bolt\\http","bolt\/http\/middleware.html","","Abstract middleware class",1],["closure","bolt\\http\\middleware","bolt\/http\/middleware\/closure.html"," < middleware","closure middleware holder",1],["direct","bolt\\http\\middleware","bolt\/http\/middleware\/direct.html"," < middleware","",1],["request","bolt\\http","bolt\/http\/request.html"," < Request","request class",1],["response","bolt\\http","bolt\/http\/response.html"," < Response","response object",1],["format","bolt\\http\\response","bolt\/http\/response\/format.html","","Abstract format class",1],["css","bolt\\http\\response\\format","bolt\/http\/response\/format\/css.html"," < format","",1],["face","bolt\\http\\response\\format","bolt\/http\/response\/format\/face.html","","",1],["generic","bolt\\http\\response\\format","bolt\/http\/response\/format\/generic.html"," < format","",1],["html","bolt\\http\\response\\format","bolt\/http\/response\/format\/html.html"," < format","",1],["js","bolt\\http\\response\\format","bolt\/http\/response\/format\/js.html"," < format","",1],["json","bolt\\http\\response\\format","bolt\/http\/response\/format\/json.html"," < format","",1],["xhr","bolt\\http\\response\\format","bolt\/http\/response\/format\/xhr.html"," < format","",1],["xml","bolt\\http\\response\\format","bolt\/http\/response\/format\/xml.html"," < format","",1],["redirect","bolt\\http\\response","bolt\/http\/response\/redirect.html"," < response","",1],["router","bolt\\http","bolt\/http\/router.html","","router manager",1],["collection","bolt\\http\\router","bolt\/http\/router\/collection.html"," < RouteCollection","collection of routes",1],["face","bolt\\http\\router","bolt\/http\/router\/face.html","","router route interface",1],["route","bolt\\http\\router","bolt\/http\/router\/route.html"," < Route","base route class",1],["session","bolt\\http","bolt\/http\/session.html","","",1],["cookie","bolt\\http\\session\\handler","bolt\/http\/session\/handler\/cookie.html","","",1],["middleware","bolt\\http\\session","bolt\/http\/session\/middleware.html"," < middleware","",1],["store","bolt\\http\\session","bolt\/http\/session\/store.html","","",1],["views","bolt\\http","bolt\/http\/views.html","","views manager",1],["compiled","bolt\\http\\views","bolt\/http\/views\/compiled.html","","",1],["face","bolt\\http\\views","bolt\/http\/views\/face.html","","",1],["file","bolt\\http\\views","bolt\/http\/views\/file.html","","",1],["log","bolt","bolt\/log.html","","",1],["models","bolt","bolt\/models.html","","model manager",1],["collection","bolt\\models","bolt\/models\/collection.html"," < collection","model collection",1],["driver","bolt\\models","bolt\/models\/driver.html","","mdoels driver",1],["entity","bolt\\models","bolt\/models\/entity.html","","",1],["findInSet","bolt\\models\\functions","bolt\/models\/functions\/findInSet.html"," < FunctionNode","",1],["fromUnixTime","bolt\\models\\functions","bolt\/models\/functions\/fromUnixTime.html"," < FunctionNode","",1],["proxy","bolt\\models","bolt\/models\/proxy.html","","model proxy",1],["stringArray","bolt\\models\\types","bolt\/models\/types\/stringArray.html"," < Type","string_array type",1],["timestamp","bolt\\models\\types","bolt\/models\/types\/timestamp.html"," < Type","Timestamp type",1],["plugin","bolt","bolt\/plugin.html","","Base plugin abstract",1],["factory","bolt\\plugin","bolt\/plugin\/factory.html","","factory interface",1],["singleton","bolt\\plugin","bolt\/plugin\/singleton.html","","singleton interface",1],["render","bolt","bolt\/render.html","","",1],["base","bolt\\render","bolt\/render\/base.html","","base render engine class",1],["dom","bolt\\render","bolt\/render\/dom.html"," < base","render a dom string",1],["handlebars","bolt\\render","bolt\/render\/handlebars.html"," < base","handlare renderer",1],["renderInterface","bolt\\render","bolt\/render\/renderInterface.html","","render interface",1],["xml","bolt\\render","bolt\/render\/xml.html"," < base","render a dom string",1],["generate","bolt\\render\\xml","bolt\/render\/xml\/generate.html","","",1],["curl","bolt\\source","bolt\/source\/curl.html","","curl manager",1],["repository","bolt\\source\\curl","bolt\/source\/curl\/repository.html","","curl model repository",1],["database","bolt\\source","bolt\/source\/database.html","","database source",1],["event","bolt\\source","bolt\/source\/event.html","","event subscriber",1],["mongodb","bolt\\source","bolt\/source\/mongodb.html","","",1],["sourceInterface","bolt\\source","bolt\/source\/sourceInterface.html","","",1],["bolt::instance","bolt","bolt.html#method_instance","()","instance",2],["bolt::__callStatic","bolt","bolt.html#method___callStatic","(string $name, array $args = array())","forward call onto the bolt instance",2],["bolt::init","bolt","bolt.html#method_init","(array $config = array())","inialize a new application interface",2],["application::__construct","bolt\\application","bolt\/application.html#method___construct","(<abbr title=\"bolt\\$config\">$config<\/abbr> $config = array())","construct a new application instance",2],["application::autoload","bolt\\application","bolt\/application.html#method_autoload","(string $class)","autoload",2],["application::getBootstrapDir","bolt\\application","bolt\/application.html#method_getBootstrapDir","()","return the bootstrap directory",2],["application::bootstrap","bolt\\application","bolt\/application.html#method_bootstrap","(string $what)","load boostrap files",2],["application::getCompiled","bolt\\application","bolt\/application.html#method_getCompiled","(string $name)","get a compiled object is the compiled plugin exists",2],["application::getAutoload","bolt\\application","bolt\/application.html#method_getAutoload","()","return all autoload settings",2],["application::env","bolt\\application","bolt\/application.html#method_env","(string $env, <abbr title=\"bolt\\Closure\">Closure<\/abbr> $callback)","check env and run callback if in that env",2],["application::hasRun","bolt\\application","bolt\/application.html#method_hasRun","()","has the application run yet",2],["application::getRoot","bolt\\application","bolt\/application.html#method_getRoot","()","get the root path",2],["application::setRoot","bolt\\application","bolt\/application.html#method_setRoot","(string $root)","set the root path for the app",2],["application::path","bolt\\application","bolt\/application.html#method_path","()","get a path relative to the $root",2],["application::load","bolt\\application","bolt\/application.html#method_load","(string $ns, string $path)","add a ns to the class loader",2],["application::getComposerFile","bolt\\application","bolt\/application.html#method_getComposerFile","()","get composer file",2],["application::run","bolt\\application","bolt\/application.html#method_run","()","run the application",2],["base::__construct","bolt\\base","bolt\/base.html#method___construct","(array $helpers = array())","Constructor",2],["base::app","bolt\\base","bolt\/base.html#method_app","($config = array())","app",2],["base::env","bolt\\base","bolt\/base.html#method_env","(string $env = null)","set the env",2],["base::guid","bolt\\base","bolt\/base.html#method_guid","(string $prefix = &#039;bolt&#039;)","return a globally unique string",2],["base::__call","bolt\\base","bolt\/base.html#method___call","(string $name, array $args)","call a helper method",2],["base::helpers","bolt\\base","bolt\/base.html#method_helpers","(string $class)","attache helper classes to the global bolt instance",2],["base::getHelpers","bolt\\base","bolt\/base.html#method_getHelpers","()","return all helpers",2],["base::exepction","bolt\\base","bolt\/base.html#method_exepction","(string $class, string $message = null, int $code = null)","throw an exception class",2],["cli::__construct","bolt\\cli","bolt\/cli.html#method___construct","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app, array $config = array())","Constructor",2],["cli::on","bolt\\cli","bolt\/cli.html#method_on","(string $e, <abbr title=\"bolt\\Closure\">Closure<\/abbr> $cb)","subscrube to console events",2],["cli::getApp","bolt\\cli","bolt\/cli.html#method_getApp","()","get the bolt app",2],["cli::getConsole","bolt\\cli","bolt\/cli.html#method_getConsole","()","get the symfony console",2],["cli::getInput","bolt\\cli","bolt\/cli.html#method_getInput","()","return console input",2],["cli::getOutput","bolt\\cli","bolt\/cli.html#method_getOutput","()","get console output",2],["cli::execute","bolt\\cli","bolt\/cli.html#method_execute","()","execute the cli application",2],["command::__construct","bolt\\cli\\command","bolt\/cli\/command.html#method___construct","(<abbr title=\"bolt\\cli\\bolt\\cli\">cli<\/abbr> $cli)","",2],["command::__get","bolt\\cli\\command","bolt\/cli\/command.html#method___get","($name)","",2],["command::get","bolt\\cli\\command","bolt\/cli\/command.html#method_get","($name)","",2],["command::progressbar","bolt\\cli\\command","bolt\/cli\/command.html#method_progressbar","($units)","",2],["command::ask","bolt\\cli\\command","bolt\/cli\/command.html#method_ask","($q)","",2],["command::askQuestion","bolt\\cli\\command","bolt\/cli\/command.html#method_askQuestion","($text)","",2],["command::askConfirmation","bolt\\cli\\command","bolt\/cli\/command.html#method_askConfirmation","($text, $default = true)","",2],["command::question","bolt\\cli\\command","bolt\/cli\/command.html#method_question","($text)","",2],["command::confirmation","bolt\\cli\\command","bolt\/cli\/command.html#method_confirmation","($text, $default = true)","",2],["command::choice","bolt\\cli\\command","bolt\/cli\/command.html#method_choice","($text, $choices, $default)","",2],["command::setName","bolt\\cli\\command","bolt\/cli\/command.html#method_setName","($name)","",2],["command::setAliases","bolt\\cli\\command","bolt\/cli\/command.html#method_setAliases","($aliases)","",2],["command::writeln","bolt\\cli\\command","bolt\/cli\/command.html#method_writeln","()","",2],["command::writeError","bolt\\cli\\command","bolt\/cli\/command.html#method_writeError","($msg)","",2],["command::arg","bolt\\cli\\command","bolt\/cli\/command.html#method_arg","($name)","",2],["command::opt","bolt\\cli\\command","bolt\/cli\/command.html#method_opt","($name)","",2],["command::init","bolt\\cli\\command","bolt\/cli\/command.html#method_init","()","",2],["command::setup","bolt\\cli\\command","bolt\/cli\/command.html#method_setup","()","",2],["command::execute","bolt\\cli\\command","bolt\/cli\/command.html#method_execute","(<abbr title=\"Symfony\\Component\\Console\\Input\\InputInterface\">InputInterface<\/abbr> $input, <abbr title=\"Symfony\\Component\\Console\\Output\\OutputInterface\">OutputInterface<\/abbr> $output)","",2],["client::bind","bolt\\client","bolt\/client.html#method_bind","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app)","bind the client comamnds to the provided bolt application",2],["compile::getConfigure","bolt\\client\\compile","bolt\/client\/compile.html#method_getConfigure","()","",2],["compile::init","bolt\\client\\compile","bolt\/client\/compile.html#method_init","()","",2],["compile::generate","bolt\\client\\compile","bolt\/client\/compile.html#method_generate","()","",2],["compile::clean","bolt\\client\\compile","bolt\/client\/compile.html#method_clean","()","",2],["compile::saveCompileLoader","bolt\\client\\compile","bolt\/client\/compile.html#method_saveCompileLoader","($name, $data)","",2],["compile::makeDir","bolt\\client\\compile","bolt\/client\/compile.html#method_makeDir","($name)","",2],["models::setup","bolt\\client\\models","bolt\/client\/models.html#method_setup","()","",2],["models::schemaCreate","bolt\\client\\models","bolt\/client\/models.html#method_schemaCreate","()","",2],["models::schemaUpdate","bolt\\client\\models","bolt\/client\/models.html#method_schemaUpdate","()","",2],["models::schemaDrop","bolt\\client\\models","bolt\/client\/models.html#method_schemaDrop","()","",2],["config::__construct","bolt\\config","bolt\/config.html#method___construct","(<abbr title=\"bolt\\bolt\\application\">application<\/abbr> $app, array $config = array())","Constructor",2],["config::onCompile","bolt\\config","bolt\/config.html#method_onCompile","(<a href=\"bolt\/helpers\/events\/event.html\"><abbr title=\"bolt\\helpers\\events\\event\">event<\/abbr><\/a> $e)","compile any config files",2],["config::register","bolt\\config","bolt\/config.html#method_register","(string|array $name, string|array $data = array())","register one or more config namspaces",2],["config::getRegistered","bolt\\config","bolt\/config.html#method_getRegistered","()","return all registered namespaces",2],["config::__get","bolt\\config","bolt\/config.html#method___get","(string $name)","magic get a namespace",2],["config::has","bolt\\config","bolt\/config.html#method_has","(string $name)","check if an attribute exists",2],["config::all","bolt\\config","bolt\/config.html#method_all","(string $name)","return all attributes for a registered bag",2],["config::get","bolt\\config","bolt\/config.html#method_get","(string $name, mixed $default = null)","get a value from a stored namespace",2],["config::set","bolt\\config","bolt\/config.html#method_set","(string $name, mixed $value)","set a value on a namespace",2],["config::remove","bolt\\config","bolt\/config.html#method_remove","(string $name)","remove a namespace",2],["config::exists","bolt\\config","bolt\/config.html#method_exists","(string $name)","does a key exist",2],["config::getIterator","bolt\\config","bolt\/config.html#method_getIterator","()","return an array iterator for storage items",2],["config::offsetSet","bolt\\config","bolt\/config.html#method_offsetSet","($name, $value)","set offset",2],["config::offsetExists","bolt\\config","bolt\/config.html#method_offsetExists","(string $name)","offset get",2],["config::offsetUnset","bolt\\config","bolt\/config.html#method_offsetUnset","(string $name)","unplug",2],["config::offsetGet","bolt\\config","bolt\/config.html#method_offsetGet","(string $name)","get a plugin",2],["dom::document","bolt\\dom","bolt\/dom.html#method_document","(string $charset = null, string $html = null)","create a document",2],["dom::fragment","bolt\\dom","bolt\/dom.html#method_fragment","(string $charset = null, string $html = null)","create a fragment",2],["dom::element","bolt\\dom","bolt\/dom.html#method_element","(string|<abbr title=\"bolt\\DOMNode\">DOMNode<\/abbr> $tag, string $value = null, array $attr = null, <a href=\"bolt\/dom\/document.html\"><abbr title=\"bolt\\dom\\document\">document<\/abbr><\/a> $document = null)","create an element",2],["dom::createDocument","bolt\\dom","bolt\/dom.html#method_createDocument","($charset = null, $html = null)","",2],["dom::createFragment","bolt\\dom","bolt\/dom.html#method_createFragment","($charset = null, $html = null)","",2],["dom::createElement","bolt\\dom","bolt\/dom.html#method_createElement","($tag, $value = null, $attr = array(), <a href=\"bolt\/dom\/document.html\"><abbr title=\"bolt\\dom\\document\">document<\/abbr><\/a> $document = null)","",2],["collection::__construct","bolt\\dom\\collection","bolt\/dom\/collection.html#method___construct","(<a href=\"bolt\/dom\/document.html\"><abbr title=\"bolt\\dom\\document\">document<\/abbr><\/a> $document)","Constructor",2],["collection::__get","bolt\\dom\\collection","bolt\/dom\/collection.html#method___get","($name)","",2],["collection::__set","bolt\\dom\\collection","bolt\/dom\/collection.html#method___set","($name, $value)","",2],["collection::__call","bolt\\dom\\collection","bolt\/dom\/collection.html#method___call","($name, $args)","",2],["document::__construct","bolt\\dom\\document","bolt\/dom\/document.html#method___construct","($charset = &#039;UTF-8&#039;, $html = null)","Constructor",2],["document::__get","bolt\\dom\\document","bolt\/dom\/document.html#method___get","($name)","",2],["document::destroyChild","bolt\\dom\\document","bolt\/dom\/document.html#method_destroyChild","(<a href=\"bolt\/dom\/element.html\"><abbr title=\"bolt\\dom\\element\">element<\/abbr><\/a> $el)","",2],["document::html","bolt\\dom\\document","bolt\/dom\/document.html#method_html","(string|null $html = null)","get or set html document HTML",2],["document::createElement","bolt\\dom\\document","bolt\/dom\/document.html#method_createElement","(string $name, string $value = null, array $attr = array())","create an element child for this document",2],["document::create","bolt\\dom\\document","bolt\/dom\/document.html#method_create","()","alias for createElement",2],["document::createElementNative","bolt\\dom\\document","bolt\/dom\/document.html#method_createElementNative","(string $name, string $value = null)","create a native dom node",2],["document::append","bolt\\dom\\document","bolt\/dom\/document.html#method_append","($child)","append something to this document",2],["document::saveHTML","bolt\\dom\\document","bolt\/dom\/document.html#method_saveHTML","($element = null)","output the html of the document",2],["document::getHTML","bolt\\dom\\document","bolt\/dom\/document.html#method_getHTML","(<abbr title=\"bolt\\dom\\DOMNode\">DOMNode<\/abbr>|<abbr title=\"bolt\\dom\\bolt\\dom\\element\">element<\/abbr> $element = null)","get HTML for the document or given element",2],["document::setHTML","bolt\\dom\\document","bolt\/dom\/document.html#method_setHTML","(string $html)","set HTML for the document",2],["document::import","bolt\\dom\\document","bolt\/dom\/document.html#method_import","(<abbr title=\"bolt\\dom\\DOMNode\">DOMNode<\/abbr>|<abbr title=\"bolt\\dom\\bolt\\dom\\node\">node<\/abbr> $node, boolean $deep = true)","import an element into this document",2],["document::cleanElement","bolt\\dom\\document","bolt\/dom\/document.html#method_cleanElement","($el = null, $useClone = false)","clean the document of any domref attributes",2],["document::find","bolt\\dom\\document","bolt\/dom\/document.html#method_find","($selector, $element = null)","find an element with CSS selector",2],["document::xpath","bolt\\dom\\document","bolt\/dom\/document.html#method_xpath","($xpath, $el = null)","",2],["document::__toString","bolt\\dom\\document","bolt\/dom\/document.html#method___toString","()","convert document to a string",2],["element::__construct","bolt\\dom\\element","bolt\/dom\/element.html#method___construct","(string|<a href=\"http:\/\/php.net\/DOMElement\"><abbr title=\"DOMElement\">DOMElement<\/abbr><\/a> $tag = null, mixed $value = null, array $attr = null, <a href=\"bolt\/dom\/document.html\"><abbr title=\"bolt\\dom\\document\">document<\/abbr><\/a> $document = null)","Constructr",2],["element::__destruct","bolt\\dom\\element","bolt\/dom\/element.html#method___destruct","()","Destructor",2],["element::init","bolt\\dom\\element","bolt\/dom\/element.html#method_init","()","called after the element has been created",2],["element::__get","bolt\\dom\\element","bolt\/dom\/element.html#method___get","(string $name)","magic get method",2],["element::__call","bolt\\dom\\element","bolt\/dom\/element.html#method___call","(string $name, array $args)","set\/get default attribute or passthrough to self::$element",2],["element::create","bolt\\dom\\element","bolt\/dom\/element.html#method_create","(string|<a href=\"http:\/\/php.net\/DOMElement\"><abbr title=\"DOMElement\">DOMElement<\/abbr><\/a> $tag, mixed $value = null, array $attr = array())","create a new element in this document",2],["element::createAndAppend","bolt\\dom\\element","bolt\/dom\/element.html#method_createAndAppend","()","create and append",2],["element::append","bolt\\dom\\element","bolt\/dom\/element.html#method_append","(mixed $child)","append a child node",2],["element::appendChild","bolt\\dom\\element","bolt\/dom\/element.html#method_appendChild","(mixed $child)","append a child node",2],["element::remove","bolt\\dom\\element","bolt\/dom\/element.html#method_remove","()","remove this node",2],["element::children","bolt\\dom\\element","bolt\/dom\/element.html#method_children","()","return all children",2],["element::clear","bolt\\dom\\element","bolt\/dom\/element.html#method_clear","()","remove all child nodes",2],["element::html","bolt\\dom\\element","bolt\/dom\/element.html#method_html","(string|null $html = null)","get or set the innerHTML of the element",2],["element::setHTML","bolt\\dom\\element","bolt\/dom\/element.html#method_setHTML","(string $html)","set element HTML",2],["element::getHTML","bolt\\dom\\element","bolt\/dom\/element.html#method_getHTML","()","get element HTML",2],["element::find","bolt\\dom\\element","bolt\/dom\/element.html#method_find","(string $selector)","query for a child element",2],["element::attr","bolt\\dom\\element","bolt\/dom\/element.html#method_attr","(string|array $name, string|null $value = null)","get or set an attribute on the element",2],["element::insertBefore","bolt\\dom\\element","bolt\/dom\/element.html#method_insertBefore","(mixed $node)","insert a node before this node in the self::$owernDocument",2],["element::replace","bolt\\dom\\element","bolt\/dom\/element.html#method_replace","(mixed $element)","replace this node with a given node",2],["element::addClass","bolt\\dom\\element","bolt\/dom\/element.html#method_addClass","(string|array $class)","add a class to the class attribute",2],["element::removeClass","bolt\\dom\\element","bolt\/dom\/element.html#method_removeClass","($class)","",2],["element::setStyle","bolt\\dom\\element","bolt\/dom\/element.html#method_setStyle","(string|array $prop, string $value = null)","set a property for the style attribute",2],["script::async","bolt\\dom\\element\\script","bolt\/dom\/element\/script.html#method_async","()","",2],["script::defer","bolt\\dom\\element\\script","bolt\/dom\/element\/script.html#method_defer","()","",2],["time::setDateTime","bolt\\dom\\element\\time","bolt\/dom\/element\/time.html#method_setDateTime","($value)","",2],["fragment::__construct","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method___construct","($charset = &#039;UTF-8&#039;, $html = null)","Constructor",2],["fragment::setHTML","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_setHTML","(string $html)","set HTML for the document",2],["fragment::getHTML","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_getHTML","($el = null)","get HTML for the document or given element",2],["fragment::appendChild","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_appendChild","(<abbr title=\"bolt\\dom\\DOMNode\">DOMNode<\/abbr> $node)","",2],["fragment::saveHTML","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_saveHTML","($el = null)","output the html of the document",2],["fragment::children","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_children","()","",2],["fragment::find","bolt\\dom\\fragment","bolt\/dom\/fragment.html#method_find","($selector, $element = NULL)","find an element with CSS selector",2],["queryable::offsetExists","bolt\\dom\\traits\\queryable","bolt\/dom\/traits\/queryable.html#method_offsetExists","(string $selector)","find a selector",2],["queryable::offsetGet","bolt\\dom\\traits\\queryable","bolt\/dom\/traits\/queryable.html#method_offsetGet","(string $selector)","get a offset",2],["queryable::offsetSet","bolt\\dom\\traits\\queryable","bolt\/dom\/traits\/queryable.html#method_offsetSet","(string $selector, mixed $value)","set the contents of an element",2],["queryable::offsetUnset","bolt\\dom\\traits\\queryable","bolt\/dom\/traits\/queryable.html#method_offsetUnset","(<abbr title=\"bolt\\dom\\traits\\strong\">strong<\/abbr> $selector)","remove a node if it exists",2],["base::param","bolt\\helpers\\base","bolt\/helpers\/base.html#method_param","(string $key, mixed $default = null, array $array, int $filter = null)","check for a variable in an array",2],["base::mergeArray","bolt\\helpers\\base","bolt\/helpers\/base.html#method_mergeArray","(array $a1, array $a2)","merge two arrays recursivly",2],["classes::getReflectionClass","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_getReflectionClass","(string $class)","get the reflection class",2],["classes::normalizeClassName","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_normalizeClassName","(string $class)","normalize a class name",2],["classes::getDeclaredClasses","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_getDeclaredClasses","()","get a list of declared classes",2],["classes::getClassImplements","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_getClassImplements","(string $name)","get classes that implement an interface",2],["classes::getSubClassOf","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_getSubClassOf","(string $name)","get classes that have class as a parent",2],["classes::classUses","bolt\\helpers\\classes","bolt\/helpers\/classes.html#method_classUses","($class, $autoload = true)","",2],["collection::__construct","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method___construct","(array $items = array())","Constructor",2],["collection::each","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_each","(string|<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $cb, array $data = array())","perform callback on each item in the array",2],["collection::first","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_first","()","return first $item",2],["collection::last","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_last","()","return last $item",2],["collection::filter","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_filter","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $cb)","filter $items by callback",2],["collection::splice","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_splice","(integer $offset, integer $length, array $replace = array())","splice",2],["collection::slice","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_slice","(integer $offset, integer $length = null, boolean $preserve_keys = true)","slice",2],["collection::map","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_map","(<a href=\"http:\/\/php.net\/Closure\"><abbr title=\"Closure\">Closure<\/abbr><\/a> $cb)","map",2],["collection::diff","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_diff","()","diff",2],["collection::intersect","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_intersect","()","intersect",2],["collection::push","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_push","(mixed $item)","push to $items",2],["collection::shift","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_shift","()","shift $items",2],["collection::pop","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_pop","()","pop $items",2],["collection::unshift","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_unshift","(<abbr title=\"bolt\\helpers\\[type]\">[type]<\/abbr> $item)","unshift",2],["collection::shuffle","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_shuffle","()","shuffle $items",2],["collection::getIterator","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_getIterator","()","return array iterator for $items",2],["collection::count","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_count","()","nubmer of $items",2],["collection::jsonSerialize","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_jsonSerialize","()","return json string of $items",2],["collection::offsetSet","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_offsetSet","(string|null $offset, mixed $value)","set value for offset",2],["collection::offsetExists","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_offsetExists","(string|integer $offset)","does offset exist",2],["collection::offsetUnset","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_offsetUnset","(string|integer $offset)","unset an offset",2],["collection::offsetGet","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_offsetGet","(string|integer $offset)","get an offset",2],["collection::toArray","bolt\\helpers\\collection","bolt\/helpers\/collection.html#method_toArray","()","return default array",2],["events::addListener","bolt\\helpers\\events","bolt\/helpers\/events.html#method_addListener","(string $type, <abbr title=\"bolt\\helpers\\Closure\">Closure<\/abbr> $cb, array $args = array())","add a listener",2],["events::removeListener","bolt\\helpers\\events","bolt\/helpers\/events.html#method_removeListener","(<a href=\"bolt\/helpers\/events\/listener.html\"><abbr title=\"bolt\\helpers\\events\\listener\">listener<\/abbr><\/a> $listener)","remove a listener from the object",2],["events::getListeners","bolt\\helpers\\events","bolt\/helpers\/events.html#method_getListeners","(string $type)","return all listeners for a given type",2],["events::getAllListeners","bolt\\helpers\\events","bolt\/helpers\/events.html#method_getAllListeners","()","return all listeners, grouped by type",2],["events::once","bolt\\helpers\\events","bolt\/helpers\/events.html#method_once","()","attach a handler that runs only once",2],["events::on","bolt\\helpers\\events","bolt\/helpers\/events.html#method_on","()","attach a listener",2],["events::off","bolt\\helpers\\events","bolt\/helpers\/events.html#method_off","()","remove a listener",2],["events::fire","bolt\\helpers\\events","bolt\/helpers\/events.html#method_fire","(string $type, array $data = array())","fire an event type",2],["events::executeListener","bolt\\helpers\\events","bolt\/helpers\/events.html#method_executeListener","(<a href=\"bolt\/helpers\/events\/listener.html\"><abbr title=\"bolt\\helpers\\events\\listener\">listener<\/abbr><\/a> $listener, $data = array())","",2],["event::__construct","bolt\\helpers\\events\\event","bolt\/helpers\/events\/event.html#method___construct","(<abbr title=\"bolt\\helpers\\events\\bolt\\helpers\\events\\listener\">listener<\/abbr> $listener, array $data = array())","Construct",2],["event::__get","bolt\\helpers\\events\\event","bolt\/helpers\/events\/event.html#method___get","($name)","return private variables",2],["event::data","bolt\\helpers\\events\\event","bolt\/helpers\/events\/event.html#method_data","(string $name, mixed $default = null)","return a data value or default",2],["event::arg","bolt\\helpers\\events\\event","bolt\/helpers\/events\/event.html#method_arg","(string $name, mixed $default = null)","return a arg value or default",2],["listener::__construct","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method___construct","($parent, $callback, $type, $args = array(), $context = false)","Construct",2],["listener::__get","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method___get","(string $name)","return private variables",2],["listener::once","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method_once","(bool $once)","set once variable",2],["listener::context","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method_context","(object $context)","context to execute callback in",2],["listener::detach","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method_detach","()","detach listener from parent",2],["listener::execute","bolt\\helpers\\events\\listener","bolt\/helpers\/events\/listener.html#method_execute","(<a href=\"bolt\/helpers\/events\/event.html\"><abbr title=\"bolt\\helpers\\events\\event\">event<\/abbr><\/a> $e)","execute the event callback",2],["fs::path","bolt\\helpers\\fs","bolt\/helpers\/fs.html#method_path","()","",2],["fs::getRegexFiles","bolt\\helpers\\fs","bolt\/helpers\/fs.html#method_getRegexFiles","($path, $regex = &#039;\/^.+\\\\.php$\/&#039;)","",2],["fs::requireFromPath","bolt\\helpers\\fs","bolt\/helpers\/fs.html#method_requireFromPath","($path, $regex = &#039;\/^.+\\\\.php$\/&#039;)","",2],["fs::fs","bolt\\helpers\\fs","bolt\/helpers\/fs.html#method_fs","()","",2],["file::__toString","bolt\\helpers\\fs\\file","bolt\/helpers\/fs\/file.html#method___toString","()","",2],["glob::__construct","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method___construct","($path, $flags = FilesystemIterator::KEY_AS_PATHNAME)","",2],["glob::setPath","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_setPath","($path)","",2],["glob::getPath","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_getPath","($path)","",2],["glob::setFlags","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_setFlags","($flags)","",2],["glob::getIterator","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_getIterator","()","",2],["glob::asArray","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_asArray","()","",2],["glob::count","bolt\\helpers\\fs\\glob","bolt\/helpers\/fs\/glob.html#method_count","()","",2],["rdir::__construct","bolt\\helpers\\fs\\rdir","bolt\/helpers\/fs\/rdir.html#method___construct","($path, $regex = null)","",2],["rdir::asArray","bolt\\helpers\\fs\\rdir","bolt\/helpers\/fs\/rdir.html#method_asArray","()","",2],["loggable::setLogInstance","bolt\\helpers\\loggable","bolt\/helpers\/loggable.html#method_setLogInstance","(<abbr title=\"bolt\\helpers\\bolt\\log\">log<\/abbr> $handler)","",2],["loggable::getLogInstance","bolt\\helpers\\loggable","bolt\/helpers\/loggable.html#method_getLogInstance","()","",2],["loggable::log","bolt\\helpers\\loggable","bolt\/helpers\/loggable.html#method_log","()","",2],["http::start","bolt\\http","bolt\/http.html#method_start","($config = array())","start a new http instance",2],["http::__construct","bolt\\http","bolt\/http.html#method___construct","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app, <a href=\"bolt\/http\/request.html\"><abbr title=\"bolt\\http\\request\">request<\/abbr><\/a> $req = null, <a href=\"bolt\/http\/response.html\"><abbr title=\"bolt\\http\\response\">response<\/abbr><\/a> $resp = null)","Constructor.",2],["http::__get","bolt\\http","bolt\/http.html#method___get","(string $name)","returns a private variable",2],["http::__call","bolt\\http","bolt\/http.html#method___call","(string $name, array $args)","call a method or passthrough to other plugin",2],["http::getApp","bolt\\http","bolt\/http.html#method_getApp","()","return the app instance",2],["http::getRequest","bolt\\http","bolt\/http.html#method_getRequest","()","return the request",2],["http::setRequest","bolt\\http","bolt\/http.html#method_setRequest","(<abbr title=\"bolt\\bolt\\http\\request\">request<\/abbr> $req)","set the response",2],["http::getResponse","bolt\\http","bolt\/http.html#method_getResponse","()","get the response object",2],["http::setResponse","bolt\\http","bolt\/http.html#method_setResponse","(<abbr title=\"bolt\\bolt\\http\\response\">response<\/abbr> $resp, $mergeCookies = true, $mergeHeaders = false)","set the response object",2],["http::path","bolt\\http","bolt\/http.html#method_path","()","get a path relative to root",2],["http::load","bolt\\http","bolt\/http.html#method_load","()","load passthrough to app",2],["http::bind","bolt\\http","bolt\/http.html#method_bind","(string|<abbr title=\"bolt\\callback\">callback<\/abbr> $name, string|<abbr title=\"bolt\\boject\">boject<\/abbr> $class = null, array $config = array())","bind middleware to this request and response",2],["http::getMiddleware","bolt\\http","bolt\/http.html#method_getMiddleware","()","return a list of all middleware",2],["http::run","bolt\\http","bolt\/http.html#method_run","()","pass off a run call to the app",2],["http::execute","bolt\\http","bolt\/http.html#method_execute","()","run the http request and send a response to the http",2],["http::runMiddleware","bolt\\http","bolt\/http.html#method_runMiddleware","(string $method, array $params = array())","run all middleware for a method",2],["http::runMiddlewareByName","bolt\\http","bolt\/http.html#method_runMiddlewareByName","(string $name, string $method, array $params = array())","run a middleware function by name",2],["assets::__construct","bolt\\http\\assets","bolt\/http\/assets.html#method___construct","(<abbr title=\"bolt\\http\\bolt\\http\">http<\/abbr> $http, array $config = array())","Constructor",2],["assets::getConfig","bolt\\http\\assets","bolt\/http\/assets.html#method_getConfig","()","",2],["assets::setCache","bolt\\http\\assets","bolt\/http\/assets.html#method_setCache","(array $cache)","",2],["assets::getCache","bolt\\http\\assets","bolt\/http\/assets.html#method_getCache","()","",2],["assets::getCompiledFileInfo","bolt\\http\\assets","bolt\/http\/assets.html#method_getCompiledFileInfo","($path)","",2],["assets::getCompiledFile","bolt\\http\\assets","bolt\/http\/assets.html#method_getCompiledFile","($path)","",2],["assets::glob","bolt\\http\\assets","bolt\/http\/assets.html#method_glob","($path, $filters = array(), $root = null)","glob",2],["assets::file","bolt\\http\\assets","bolt\/http\/assets.html#method_file","($path, $filters = array(), $root = null)","file",2],["assets::set","bolt\\http\\assets","bolt\/http\/assets.html#method_set","($name, $files)","set",2],["assets::collection","bolt\\http\\assets","bolt\/http\/assets.html#method_collection","($collection, $filters = array(), $root = null, $vars = array())","",2],["assets::factory","bolt\\http\\assets","bolt\/http\/assets.html#method_factory","($root = null, $manager = null, $filter = null, $debug = null)","",2],["assets::url","bolt\\http\\assets","bolt\/http\/assets.html#method_url","($path)","",2],["assets::getRoot","bolt\\http\\assets","bolt\/http\/assets.html#method_getRoot","()","",2],["assets::getManager","bolt\\http\\assets","bolt\/http\/assets.html#method_getManager","()","",2],["assets::__get","bolt\\http\\assets","bolt\/http\/assets.html#method___get","($name)","",2],["assets::path","bolt\\http\\assets","bolt\/http\/assets.html#method_path","($path)","",2],["assets::getFilters","bolt\\http\\assets","bolt\/http\/assets.html#method_getFilters","()","",2],["assets::compile","bolt\\http\\assets","bolt\/http\/assets.html#method_compile","($assets)","",2],["assets::isCompiling","bolt\\http\\assets","bolt\/http\/assets.html#method_isCompiling","()","",2],["assets::onCompile","bolt\\http\\assets","bolt\/http\/assets.html#method_onCompile","(<abbr title=\"bolt\\http\\bolt\\events\\event\">event<\/abbr> $e)","compile assets into the compile directory",2],["assets::compileCollection","bolt\\http\\assets","bolt\/http\/assets.html#method_compileCollection","($name)","",2],["cssRewrite::__construct","bolt\\http\\assets\\filters\\cssRewrite","bolt\/http\/assets\/filters\/cssRewrite.html#method___construct","(<abbr title=\"bolt\\http\\assets\\filters\\bolt\\http\">http<\/abbr> $http)","",2],["cssRewrite::filterLoad","bolt\\http\\assets\\filters\\cssRewrite","bolt\/http\/assets\/filters\/cssRewrite.html#method_filterLoad","(<abbr title=\"Assetic\\Asset\\AssetInterface\">AssetInterface<\/abbr> $asset)","",2],["cssRewrite::filterDump","bolt\\http\\assets\\filters\\cssRewrite","bolt\/http\/assets\/filters\/cssRewrite.html#method_filterDump","(<abbr title=\"Assetic\\Asset\\AssetInterface\">AssetInterface<\/abbr> $asset)","",2],["group::__construct","bolt\\http\\assets\\group","bolt\/http\/assets\/group.html#method___construct","(<abbr title=\"bolt\\http\\assets\\bolt\\http\\assets\">assets<\/abbr> $assets, $name, $type)","",2],["group::getType","bolt\\http\\assets\\group","bolt\/http\/assets\/group.html#method_getType","()","",2],["group::getName","bolt\\http\\assets\\group","bolt\/http\/assets\/group.html#method_getName","()","",2],["group::count","bolt\\http\\assets\\group","bolt\/http\/assets\/group.html#method_count","()","",2],["group::add","bolt\\http\\assets\\group","bolt\/http\/assets\/group.html#method_add","($files)","",2],["group::getComboUrl","bolt\\http\\assets\\group","bolt\/http\/assets\/group.html#method_getComboUrl","()","",2],["group::appendToDom","bolt\\http\\assets\\group","bolt\/http\/assets\/group.html#method_appendToDom","($dom, $to, $combo = true, $attr = array())","",2],["group::getIterator","bolt\\http\\assets\\group","bolt\/http\/assets\/group.html#method_getIterator","()","",2],["middleware::init","bolt\\http\\assets\\middleware","bolt\/http\/assets\/middleware.html#method_init","()","default init class",2],["middleware::before","bolt\\http\\assets\\middleware","bolt\/http\/assets\/middleware.html#method_before","()","",2],["controller::__construct","bolt\\http\\controller","bolt\/http\/controller.html#method___construct","(<abbr title=\"bolt\\http\\bolt\\http\">http<\/abbr> $http)","Construct",2],["controller::init","bolt\\http\\controller","bolt\/http\/controller.html#method_init","()","initalize class holder class",2],["controller::before","bolt\\http\\controller","bolt\/http\/controller.html#method_before","()","",2],["controller::after","bolt\\http\\controller","bolt\/http\/controller.html#method_after","()","",2],["controller::useLayout","bolt\\http\\controller","bolt\/http\/controller.html#method_useLayout","(bool $layout)","toggle use the layout",2],["controller::getUseLayout","bolt\\http\\controller","bolt\/http\/controller.html#method_getUseLayout","()","check useLayout varaible",2],["controller::__get","bolt\\http\\controller","bolt\/http\/controller.html#method___get","(string $name)","get a magic variables",2],["controller::__set","bolt\\http\\controller","bolt\/http\/controller.html#method___set","(string $name, mixed $value)","set a paramater",2],["controller::__isset","bolt\\http\\controller","bolt\/http\/controller.html#method___isset","(<abbr title=\"bolt\\http\\$name\">$name<\/abbr> $name)","does a param exist",2],["controller::getParameters","bolt\\http\\controller","bolt\/http\/controller.html#method_getParameters","()","get paramaters",2],["controller::view","bolt\\http\\controller","bolt\/http\/controller.html#method_view","(string $file, array $vars = array())","create a view",2],["closure::build","bolt\\http\\controller\\closure","bolt\/http\/controller\/closure.html#method_build","(array $params = array())","build the controller",2],["route::__construct","bolt\\http\\controller\\route","bolt\/http\/controller\/route.html#method___construct","(<abbr title=\"bolt\\http\\controller\\bolt\\http\">http<\/abbr> $http, <abbr title=\"bolt\\http\\controller\\bolt\\http\\request\">request<\/abbr> $req = null, <abbr title=\"bolt\\http\\controller\\bolt\\http\\response\">response<\/abbr> $resp = null)","Construct",2],["route::__get","bolt\\http\\controller\\route","bolt\/http\/controller\/route.html#method___get","(string $name)","magic get method",2],["route::setResponse","bolt\\http\\controller\\route","bolt\/http\/controller\/route.html#method_setResponse","(<abbr title=\"bolt\\http\\controller\\bolt\\http\\response\">response<\/abbr> $resp)","",2],["route::exception","bolt\\http\\controller\\route","bolt\/http\/controller\/route.html#method_exception","(string $class, string $message = null, int $code = null)","throw an exception",2],["route::format","bolt\\http\\controller\\route","bolt\/http\/controller\/route.html#method_format","(string|array $format, mixed $content = false)","add a response format",2],["route::build","bolt\\http\\controller\\route","bolt\/http\/controller\/route.html#method_build","(array $params = array())","build the controller",2],["route::run","bolt\\http\\controller\\route","bolt\/http\/controller\/route.html#method_run","(array $params)","run the controller",2],["middleware::__construct","bolt\\http\\middleware","bolt\/http\/middleware.html#method___construct","(<abbr title=\"bolt\\http\\bolt\\http\">http<\/abbr> $http, array $config = array())","Constructor",2],["middleware::init","bolt\\http\\middleware","bolt\/http\/middleware.html#method_init","()","default init class",2],["middleware::__get","bolt\\http\\middleware","bolt\/http\/middleware.html#method___get","(string $name)","magic get",2],["middleware::execute","bolt\\http\\middleware","bolt\/http\/middleware.html#method_execute","(string $method, array $args = array())","execute a middleware method",2],["closure::setEvent","bolt\\http\\middleware\\closure","bolt\/http\/middleware\/closure.html#method_setEvent","(string $event)","set the event to fire middleware",2],["closure::setClosure","bolt\\http\\middleware\\closure","bolt\/http\/middleware\/closure.html#method_setClosure","(<abbr title=\"bolt\\http\\middleware\\Closure\">Closure<\/abbr> $closure)","set the middleware closure",2],["closure::before","bolt\\http\\middleware\\closure","bolt\/http\/middleware\/closure.html#method_before","(array $args = array())","before middleware event",2],["closure::handle","bolt\\http\\middleware\\closure","bolt\/http\/middleware\/closure.html#method_handle","(array $args = array())","handle the middleware request",2],["closure::after","bolt\\http\\middleware\\closure","bolt\/http\/middleware\/closure.html#method_after","(array $args = array())","after middleware event",2],["direct::before","bolt\\http\\middleware\\direct","bolt\/http\/middleware\/direct.html#method_before","()","",2],["request::__construct","bolt\\http\\request","bolt\/http\/request.html#method___construct","()","Constructor.",2],["request::getContext","bolt\\http\\request","bolt\/http\/request.html#method_getContext","()","get the request context",2],["response::__construct","bolt\\http\\response","bolt\/http\/response.html#method___construct","()","Constructor",2],["response::guid","bolt\\http\\response","bolt\/http\/response.html#method_guid","()","",2],["response::format","bolt\\http\\response","bolt\/http\/response.html#method_format","(string|array $format, mixed $content = null, <abbr title=\"bolt\\http\\bolt\\http\\controller\">controller<\/abbr> $controller = null)","add a response format",2],["response::setCookie","bolt\\http\\response","bolt\/http\/response.html#method_setCookie","($cookie)","",2],["response::getFormat","bolt\\http\\response","bolt\/http\/response.html#method_getFormat","(string $format)","return all registered formats",2],["response::hasFormat","bolt\\http\\response","bolt\/http\/response.html#method_hasFormat","(string $format)","does this response have a foramt",2],["response::setLayout","bolt\\http\\response","bolt\/http\/response.html#method_setLayout","(mixed $layout)","set a layout handler for this response",2],["response::getLayout","bolt\\http\\response","bolt\/http\/response.html#method_getLayout","()","get the current layout",2],["response::setException","bolt\\http\\response","bolt\/http\/response.html#method_setException","(<abbr title=\"bolt\\http\\Exception\">Exception<\/abbr> $e)","set a response exception",2],["response::hasException","bolt\\http\\response","bolt\/http\/response.html#method_hasException","()","does the response have an exception",2],["response::getException","bolt\\http\\response","bolt\/http\/response.html#method_getException","()","get eh response exception",2],["response::isReadyToSend","bolt\\http\\response","bolt\/http\/response.html#method_isReadyToSend","(boolean $ready = null)","get or set the response $_readyToSend",2],["response::setHeader","bolt\\http\\response","bolt\/http\/response.html#method_setHeader","(string $name, string|array $value, bool $replace = true)","set a header",2],["response::readyToSend","bolt\\http\\response","bolt\/http\/response.html#method_readyToSend","()","set response as ready to send",2],["response::prepare","bolt\\http\\response","bolt\/http\/response.html#method_prepare","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Request\">Request<\/abbr> $request)","prepare the response to be output",2],["format::__construct","bolt\\http\\response\\format","bolt\/http\/response\/format.html#method___construct","(<abbr title=\"bolt\\http\\response\\bolt\\http\\response\">response<\/abbr> $parent, <abbr title=\"bolt\\http\\response\\bolt\\http\\controller\">controller<\/abbr> $controller = null)","Construct",2],["format::__call","bolt\\http\\response\\format","bolt\/http\/response\/format.html#method___call","($name, $args)","",2],["format::__get","bolt\\http\\response\\format","bolt\/http\/response\/format.html#method___get","($name)","",2],["format::setHeader","bolt\\http\\response\\format","bolt\/http\/response\/format.html#method_setHeader","(string $name, string|array $value, bool $replace = true)","set a header",2],["format::setContent","bolt\\http\\response\\format","bolt\/http\/response\/format.html#method_setContent","(mixed $content)","set the format content",2],["format::getContent","bolt\\http\\response\\format","bolt\/http\/response\/format.html#method_getContent","()","get the content",2],["format::getContentType","bolt\\http\\response\\format","bolt\/http\/response\/format.html#method_getContentType","()","get the content type",2],["format::__invoke","bolt\\http\\response\\format","bolt\/http\/response\/format.html#method___invoke","()","invoke the format and return content",2],["json::format","bolt\\http\\response\\format\\json","bolt\/http\/response\/format\/json.html#method_format","($content)","",2],["xhr::format","bolt\\http\\response\\format\\xhr","bolt\/http\/response\/format\/xhr.html#method_format","($content)","",2],["xml::format","bolt\\http\\response\\format\\xml","bolt\/http\/response\/format\/xml.html#method_format","($content)","",2],["redirect::__construct","bolt\\http\\response\\redirect","bolt\/http\/response\/redirect.html#method___construct","($url = false, $code = 301)","Constructor",2],["redirect::setUrl","bolt\\http\\response\\redirect","bolt\/http\/response\/redirect.html#method_setUrl","($url)","",2],["router::__construct","bolt\\http\\router","bolt\/http\/router.html#method___construct","(<abbr title=\"bolt\\http\\bolt\\http\">http<\/abbr> $http, $config = array())","Constructor",2],["router::onCompile","bolt\\http\\router","bolt\/http\/router.html#method_onCompile","($e)","",2],["router::getCollection","bolt\\http\\router","bolt\/http\/router.html#method_getCollection","()","get collection",2],["router::__call","bolt\\http\\router","bolt\/http\/router.html#method___call","(string $name, array $args)","magic call",2],["router::add","bolt\\http\\router","bolt\/http\/router.html#method_add","(<abbr title=\"bolt\\http\\bolt\\http\\router\\route\">route<\/abbr> $route)","add a route to the toplevel collection",2],["router::getByName","bolt\\http\\router","bolt\/http\/router.html#method_getByName","($name)","",2],["router::match","bolt\\http\\router","bolt\/http\/router.html#method_match","(<abbr title=\"bolt\\http\\bolt\\http\\request\">request<\/abbr> $req, string $path = null)","match a request to defined routes",2],["router::loadFromControllers","bolt\\http\\router","bolt\/http\/router.html#method_loadFromControllers","(<a href=\"bolt\/http\/router\/collection.html\"><abbr title=\"bolt\\http\\router\\collection\">collection<\/abbr><\/a> $collection = null)","load all routes that are defined in controllers that",2],["collection::create","bolt\\http\\router\\collection","bolt\/http\/router\/collection.html#method_create","(array $routes = array())","static create route collection",2],["collection::__set_state","bolt\\http\\router\\collection","bolt\/http\/router\/collection.html#method___set_state","($state)","",2],["route::create","bolt\\http\\router\\route","bolt\/http\/router\/route.html#method_create","(array $route)","static create a route class",2],["route::__set_state","bolt\\http\\router\\route","bolt\/http\/router\/route.html#method___set_state","($state)","",2],["route::setName","bolt\\http\\router\\route","bolt\/http\/router\/route.html#method_setName","(string $name)","set the route name",2],["route::getName","bolt\\http\\router\\route","bolt\/http\/router\/route.html#method_getName","()","get the route name",2],["route::setController","bolt\\http\\router\\route","bolt\/http\/router\/route.html#method_setController","(mixed $controller)","set the route controller",2],["route::getController","bolt\\http\\router\\route","bolt\/http\/router\/route.html#method_getController","()","get route controller",2],["route::setRequire","bolt\\http\\router\\route","bolt\/http\/router\/route.html#method_setRequire","(string $require)","set a required param",2],["route::setAction","bolt\\http\\router\\route","bolt\/http\/router\/route.html#method_setAction","(string $action)","set the controller action",2],["route::setFormats","bolt\\http\\router\\route","bolt\/http\/router\/route.html#method_setFormats","(string $format)","set response formats",2],["route::compile","bolt\\http\\router\\route","bolt\/http\/router\/route.html#method_compile","()","compile the route",2],["session::__construct","bolt\\http\\session","bolt\/http\/session.html#method___construct","(<abbr title=\"bolt\\http\\bolt\\http\">http<\/abbr> $http, array $config = array())","",2],["session::getHttp","bolt\\http\\session","bolt\/http\/session.html#method_getHttp","()","",2],["session::getName","bolt\\http\\session","bolt\/http\/session.html#method_getName","()","",2],["session::start","bolt\\http\\session","bolt\/http\/session.html#method_start","()","",2],["session::destroy","bolt\\http\\session","bolt\/http\/session.html#method_destroy","()","",2],["session::set","bolt\\http\\session","bolt\/http\/session.html#method_set","($name, $value)","",2],["session::__get","bolt\\http\\session","bolt\/http\/session.html#method___get","($name)","",2],["session::__set","bolt\\http\\session","bolt\/http\/session.html#method___set","($name, $value)","",2],["session::__isset","bolt\\http\\session","bolt\/http\/session.html#method___isset","($name)","",2],["session::__call","bolt\\http\\session","bolt\/http\/session.html#method___call","($name, $args)","",2],["session::offsetGet","bolt\\http\\session","bolt\/http\/session.html#method_offsetGet","($name)","",2],["session::offsetSet","bolt\\http\\session","bolt\/http\/session.html#method_offsetSet","($name, $value)","",2],["session::offsetUnset","bolt\\http\\session","bolt\/http\/session.html#method_offsetUnset","($name)","",2],["session::offsetExists","bolt\\http\\session","bolt\/http\/session.html#method_offsetExists","($name)","",2],["cookie::__construct","bolt\\http\\session\\handler\\cookie","bolt\/http\/session\/handler\/cookie.html#method___construct","($config = array())","",2],["cookie::setManager","bolt\\http\\session\\handler\\cookie","bolt\/http\/session\/handler\/cookie.html#method_setManager","(<abbr title=\"bolt\\http\\session\\handler\\bolt\\http\\session\">session<\/abbr> $manager)","",2],["cookie::open","bolt\\http\\session\\handler\\cookie","bolt\/http\/session\/handler\/cookie.html#method_open","($path, $name)","",2],["cookie::close","bolt\\http\\session\\handler\\cookie","bolt\/http\/session\/handler\/cookie.html#method_close","()","",2],["cookie::read","bolt\\http\\session\\handler\\cookie","bolt\/http\/session\/handler\/cookie.html#method_read","($id)","",2],["cookie::encodeData","bolt\\http\\session\\handler\\cookie","bolt\/http\/session\/handler\/cookie.html#method_encodeData","($data)","",2],["cookie::decodeData","bolt\\http\\session\\handler\\cookie","bolt\/http\/session\/handler\/cookie.html#method_decodeData","($data)","",2],["cookie::write","bolt\\http\\session\\handler\\cookie","bolt\/http\/session\/handler\/cookie.html#method_write","($id, $data)","",2],["cookie::destroy","bolt\\http\\session\\handler\\cookie","bolt\/http\/session\/handler\/cookie.html#method_destroy","($id)","",2],["cookie::gc","bolt\\http\\session\\handler\\cookie","bolt\/http\/session\/handler\/cookie.html#method_gc","($max)","",2],["middleware::before","bolt\\http\\session\\middleware","bolt\/http\/session\/middleware.html#method_before","()","",2],["middleware::after","bolt\\http\\session\\middleware","bolt\/http\/session\/middleware.html#method_after","()","",2],["store::__construct","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method___construct","(<abbr title=\"bolt\\http\\session\\bolt\\http\\session\">session<\/abbr> $manager, $name, <abbr title=\"bolt\\http\\session\\SessionHandlerInterface\">SessionHandlerInterface<\/abbr> $driver)","",2],["store::start","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_start","()","",2],["store::isStarted","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_isStarted","()","",2],["store::getId","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_getId","()","",2],["store::setId","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_setId","($id)","",2],["store::getName","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_getName","()","",2],["store::setName","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_setName","($name)","",2],["store::regenerate","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_regenerate","($destroy = false, $lifetime = null)","",2],["store::generateId","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_generateId","()","",2],["store::destroy","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_destroy","()","",2],["store::save","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_save","()","",2],["store::clear","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_clear","()","",2],["store::getBag","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_getBag","($name)","",2],["store::registerBag","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_registerBag","(<abbr title=\"bolt\\http\\session\\Symfony\\Component\\HttpFoundation\\Session\\SessionBagInterface\">SessionBagInterface<\/abbr> $bag)","",2],["store::setMetadataBag","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_setMetadataBag","(<abbr title=\"Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag\">MetadataBag<\/abbr> $bag)","",2],["store::getMetadataBag","bolt\\http\\session\\store","bolt\/http\/session\/store.html#method_getMetadataBag","()","",2],["views::__construct","bolt\\http\\views","bolt\/http\/views.html#method___construct","(<abbr title=\"bolt\\http\\bolt\\http\">http<\/abbr> $http, array $config = array())","Constructor",2],["views::dir","bolt\\http\\views","bolt\/http\/views.html#method_dir","($path)","add a dir",2],["views::engine","bolt\\http\\views","bolt\/http\/views.html#method_engine","($ext, $class)","",2],["views::getEngines","bolt\\http\\views","bolt\/http\/views.html#method_getEngines","()","",2],["views::getDirs","bolt\\http\\views","bolt\/http\/views.html#method_getDirs","()","get view directories",2],["views::find","bolt\\http\\views","bolt\/http\/views.html#method_find","($file)","find a view file in given dirs",2],["views::exists","bolt\\http\\views","bolt\/http\/views.html#method_exists","(string $file, array $dirs = null)","check if a view exists",2],["views::create","bolt\\http\\views","bolt\/http\/views.html#method_create","(string $file, array $vars = array(), object $context = false)","create a view of self::$_class",2],["views::onCompile","bolt\\http\\views","bolt\/http\/views.html#method_onCompile","($e)","",2],["compiled::__construct","bolt\\http\\views\\compiled","bolt\/http\/views\/compiled.html#method___construct","(<abbr title=\"bolt\\http\\views\\bolt\\http\\views\">views<\/abbr> $manager, $config = array())","",2],["compiled::render","bolt\\http\\views\\compiled","bolt\/http\/views\/compiled.html#method_render","()","",2],["compiled::__invoke","bolt\\http\\views\\compiled","bolt\/http\/views\/compiled.html#method___invoke","()","",2],["compiled::__toString","bolt\\http\\views\\compiled","bolt\/http\/views\/compiled.html#method___toString","()","",2],["face::__invoke","bolt\\http\\views\\face","bolt\/http\/views\/face.html#method___invoke","()","",2],["face::render","bolt\\http\\views\\face","bolt\/http\/views\/face.html#method_render","()","",2],["face::__toString","bolt\\http\\views\\face","bolt\/http\/views\/face.html#method___toString","()","",2],["file::__construct","bolt\\http\\views\\file","bolt\/http\/views\/file.html#method___construct","(<abbr title=\"bolt\\http\\views\\bolt\\http\\views\">views<\/abbr> $manager, $config = array())","",2],["file::render","bolt\\http\\views\\file","bolt\/http\/views\/file.html#method_render","()","",2],["file::__invoke","bolt\\http\\views\\file","bolt\/http\/views\/file.html#method___invoke","()","",2],["file::__toString","bolt\\http\\views\\file","bolt\/http\/views\/file.html#method___toString","()","",2],["log::factory","bolt\\log","bolt\/log.html#method_factory","(<abbr title=\"bolt\\bolt\\application\">application<\/abbr> $parent, array $config = array())","create a log instance",2],["log::__construct","bolt\\log","bolt\/log.html#method___construct","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app, array $config = array())","Constructor",2],["log::getInstance","bolt\\log","bolt\/log.html#method_getInstance","()","get the Monolog instance",2],["log::getName","bolt\\log","bolt\/log.html#method_getName","()","return the instance name",2],["log::level","bolt\\log","bolt\/log.html#method_level","(string $name)","return a logger instance constant",2],["log::__call","bolt\\log","bolt\/log.html#method___call","(string $name, array $args)","passthrough to monolog\\logger",2],["log::handler","bolt\\log","bolt\/log.html#method_handler","(string $class, mixed $level = null, array $args = array())","add a handler to the Mongolog\\Logger instnace",2],["log::processor","bolt\\log","bolt\/log.html#method_processor","(string $class, array $args = array())","add a processor to Mongolog\\Logger instance",2],["models::__construct","bolt\\models","bolt\/models.html#method___construct","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app, array $config = array())","Construct",2],["models::getSource","bolt\\models","bolt\/models.html#method_getSource","()","return the source driver",2],["models::getApp","bolt\\models","bolt\/models.html#method_getApp","()","return the base app",2],["models::getCollection","bolt\\models","bolt\/models.html#method_getCollection","(string $entity)","get a model collection object",2],["models::generateEntity","bolt\\models","bolt\/models.html#method_generateEntity","(string $entity, array $data)","generate an entity from",2],["models::getEntityManager","bolt\\models","bolt\/models.html#method_getEntityManager","()","return the entity manager refrance",2],["models::loadFromDirectories","bolt\\models","bolt\/models.html#method_loadFromDirectories","()","load all models in the config directories",2],["models::get","bolt\\models","bolt\/models.html#method_get","(string $name)","get a model",2],["models::find","bolt\\models","bolt\/models.html#method_find","(string $entity, mixed $id)","find an entity by primary key",2],["models::findAll","bolt\\models","bolt\/models.html#method_findAll","(string $entity)","find all entities",2],["models::findBy","bolt\\models","bolt\/models.html#method_findBy","(string $entity, array $criteria, array $order = null, int $limit = null, <abbr title=\"bolt\\init\">init<\/abbr> $offset = null)","find entities by search $criteria",2],["models::findOneBy","bolt\\models","bolt\/models.html#method_findOneBy","(string $entity, array $criteria, array $order = array())","find one enitity by query $criteria",2],["models::save","bolt\\models","bolt\/models.html#method_save","(<a href=\"bolt\/models\/entity.html\"><abbr title=\"bolt\\models\\entity\">entity<\/abbr><\/a> $entity)","save an entity using the entity manager",2],["models::delete","bolt\\models","bolt\/models.html#method_delete","(<a href=\"bolt\/models\/entity.html\"><abbr title=\"bolt\\models\\entity\">entity<\/abbr><\/a> $entity)","delete an entity using the entity manager",2],["models::getRepoForEntity","bolt\\models","bolt\/models.html#method_getRepoForEntity","(string $entity)","return a repository for a give entity or alias",2],["models::create","bolt\\models","bolt\/models.html#method_create","(string $entity, array $data = array(), boolean $partial = false)","created an entity object",2],["models::alias","bolt\\models","bolt\/models.html#method_alias","(string $name, string $entity)","register an entity alias",2],["models::getAliases","bolt\\models","bolt\/models.html#method_getAliases","()","get all registered aliases",2],["models::offsetSet","bolt\\models","bolt\/models.html#method_offsetSet","(string $name, string $class)","register an entity alias",2],["models::offsetExists","bolt\\models","bolt\/models.html#method_offsetExists","(string $name)","check to see if a registered alias exists",2],["models::offsetUnset","bolt\\models","bolt\/models.html#method_offsetUnset","(string $name)","remove an alias",2],["models::offsetGet","bolt\\models","bolt\/models.html#method_offsetGet","(string $name)","create a new model from given alias or entity class",2],["models::generate","bolt\\models","bolt\/models.html#method_generate","($class, array $data, <abbr title=\"bolt\\bolt\\models\">models<\/abbr> $manager = null)","generate an model",2],["collection::__construct","bolt\\models\\collection","bolt\/models\/collection.html#method___construct","(<abbr title=\"bolt\\models\\bolt\\models\">models<\/abbr> $manager, string $entity, array $items = array(), array $opts = array())","Constructor",2],["collection::setTotal","bolt\\models\\collection","bolt\/models\/collection.html#method_setTotal","($total)","",2],["collection::getTotal","bolt\\models\\collection","bolt\/models\/collection.html#method_getTotal","()","",2],["collection::setOffset","bolt\\models\\collection","bolt\/models\/collection.html#method_setOffset","($offset)","",2],["collection::getOffset","bolt\\models\\collection","bolt\/models\/collection.html#method_getOffset","()","",2],["collection::setLimit","bolt\\models\\collection","bolt\/models\/collection.html#method_setLimit","($limit)","",2],["collection::getLimit","bolt\\models\\collection","bolt\/models\/collection.html#method_getLimit","()","",2],["collection::getCurrentPage","bolt\\models\\collection","bolt\/models\/collection.html#method_getCurrentPage","()","",2],["collection::getNumPages","bolt\\models\\collection","bolt\/models\/collection.html#method_getNumPages","()","",2],["collection::getLastPage","bolt\\models\\collection","bolt\/models\/collection.html#method_getLastPage","()","",2],["collection::getFirstPage","bolt\\models\\collection","bolt\/models\/collection.html#method_getFirstPage","()","",2],["collection::hasPage","bolt\\models\\collection","bolt\/models\/collection.html#method_hasPage","($page)","",2],["collection::hasPages","bolt\\models\\collection","bolt\/models\/collection.html#method_hasPages","()","",2],["collection::hasNextPage","bolt\\models\\collection","bolt\/models\/collection.html#method_hasNextPage","()","",2],["collection::hasPrevPage","bolt\\models\\collection","bolt\/models\/collection.html#method_hasPrevPage","()","",2],["collection::getPageRange","bolt\\models\\collection","bolt\/models\/collection.html#method_getPageRange","()","",2],["collection::__get","bolt\\models\\collection","bolt\/models\/collection.html#method___get","(string $name)","get a paramter",2],["collection::__set","bolt\\models\\collection","bolt\/models\/collection.html#method___set","(string $name, mixed $value)","set a paramater",2],["collection::push","bolt\\models\\collection","bolt\/models\/collection.html#method_push","(object $object)","push an object to the stack",2],["collection::unshift","bolt\\models\\collection","bolt\/models\/collection.html#method_unshift","(object $object)","unshift an object",2],["collection::asArray","bolt\\models\\collection","bolt\/models\/collection.html#method_asArray","()","",2],["driver::__construct","bolt\\models\\driver","bolt\/models\/driver.html#method___construct","(<abbr title=\"bolt\\models\\bolt\\models\">models<\/abbr> $man)","Constructor",2],["driver::loadMetadataForClass","bolt\\models\\driver","bolt\/models\/driver.html#method_loadMetadataForClass","(string $className, <abbr title=\"Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata\">ClassMetadata<\/abbr> $metadata)","load metdata for a model",2],["driver::getAllClassNames","bolt\\models\\driver","bolt\/models\/driver.html#method_getAllClassNames","()","get all classnames for entities",2],["driver::isTransient","bolt\\models\\driver","bolt\/models\/driver.html#method_isTransient","(string $className)","is transient",2],["entity::struct","bolt\\models\\entity","bolt\/models\/entity.html#method_struct","($metadata)","",2],["entity::getApp","bolt\\models\\entity","bolt\/models\/entity.html#method_getApp","()","get the base app",2],["entity::setManager","bolt\\models\\entity","bolt\/models\/entity.html#method_setManager","(<abbr title=\"bolt\\models\\bolt\\models\">models<\/abbr> $manager)","set the models manager",2],["entity::getManager","bolt\\models\\entity","bolt\/models\/entity.html#method_getManager","()","get the models manager",2],["entity::setLoaded","bolt\\models\\entity","bolt\/models\/entity.html#method_setLoaded","(bool $loaded)","set if the model is loaded",2],["entity::isLoaded","bolt\\models\\entity","bolt\/models\/entity.html#method_isLoaded","()","check if the model is loaded",2],["entity::loaded","bolt\\models\\entity","bolt\/models\/entity.html#method_loaded","()","check if the model is loaded",2],["entity::getValue","bolt\\models\\entity","bolt\/models\/entity.html#method_getValue","(string $var, mixed $default = null)","get a value using the property accessor or return the",2],["entity::__get","bolt\\models\\entity","bolt\/models\/entity.html#method___get","($name)","get an attribute value",2],["entity::__set","bolt\\models\\entity","bolt\/models\/entity.html#method___set","(string $name, mixed $value)","set an attribute value",2],["entity::has","bolt\\models\\entity","bolt\/models\/entity.html#method_has","($selector)","has",2],["entity::__isset","bolt\\models\\entity","bolt\/models\/entity.html#method___isset","(string $name)","check if a value isset for the property since our object",2],["entity::set","bolt\\models\\entity","bolt\/models\/entity.html#method_set","(array $data)","set object values from given array",2],["entity::afterNormalize","bolt\\models\\entity","bolt\/models\/entity.html#method_afterNormalize","(array $array)","run after the object has been normalized",2],["entity::beforeNormalize","bolt\\models\\entity","bolt\/models\/entity.html#method_beforeNormalize","()","before normalize",2],["entity::normalize","bolt\\models\\entity","bolt\/models\/entity.html#method_normalize","()","return a normalized array of this object",2],["entity::asArray","bolt\\models\\entity","bolt\/models\/entity.html#method_asArray","()","return object as an array",2],["entity::jsonSerialize","bolt\\models\\entity","bolt\/models\/entity.html#method_jsonSerialize","()","serialize as json",2],["entity::__toString","bolt\\models\\entity","bolt\/models\/entity.html#method___toString","()","return object as JSON string",2],["entity::save","bolt\\models\\entity","bolt\/models\/entity.html#method_save","()","save this object",2],["entity::delete","bolt\\models\\entity","bolt\/models\/entity.html#method_delete","()","delete the object",2],["entity::getPrimaryKey","bolt\\models\\entity","bolt\/models\/entity.html#method_getPrimaryKey","()","",2],["findInSet::parse","bolt\\models\\functions\\findInSet","bolt\/models\/functions\/findInSet.html#method_parse","(<abbr title=\"bolt\\models\\functions\\Doctrine\\ORM\\Query\\Parser\">Parser<\/abbr> $parser)","",2],["findInSet::getSql","bolt\\models\\functions\\findInSet","bolt\/models\/functions\/findInSet.html#method_getSql","(<abbr title=\"bolt\\models\\functions\\Doctrine\\ORM\\Query\\SqlWalker\">SqlWalker<\/abbr> $sqlWalker)","",2],["fromUnixTime::parse","bolt\\models\\functions\\fromUnixTime","bolt\/models\/functions\/fromUnixTime.html#method_parse","(<abbr title=\"bolt\\models\\functions\\Doctrine\\ORM\\Query\\Parser\">Parser<\/abbr> $parser)","",2],["fromUnixTime::getSql","bolt\\models\\functions\\fromUnixTime","bolt\/models\/functions\/fromUnixTime.html#method_getSql","(<abbr title=\"bolt\\models\\functions\\Doctrine\\ORM\\Query\\SqlWalker\">SqlWalker<\/abbr> $sqlWalker)","",2],["proxy::__construct","bolt\\models\\proxy","bolt\/models\/proxy.html#method___construct","(<abbr title=\"bolt\\models\\bolt\\models\">models<\/abbr> $manager, string $class)","Constructor",2],["proxy::getClassName","bolt\\models\\proxy","bolt\/models\/proxy.html#method_getClassName","()","return the class name",2],["proxy::__call","bolt\\models\\proxy","bolt\/models\/proxy.html#method___call","(string $name, array $args)","proxy function class to manager",2],["stringArray::getSqlDeclaration","bolt\\models\\types\\stringArray","bolt\/models\/types\/stringArray.html#method_getSqlDeclaration","(array $fieldDeclaration, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["stringArray::convertToPHPValue","bolt\\models\\types\\stringArray","bolt\/models\/types\/stringArray.html#method_convertToPHPValue","($value, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["stringArray::convertToDatabaseValue","bolt\\models\\types\\stringArray","bolt\/models\/types\/stringArray.html#method_convertToDatabaseValue","($value, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["stringArray::getName","bolt\\models\\types\\stringArray","bolt\/models\/types\/stringArray.html#method_getName","()","",2],["timestamp::getSqlDeclaration","bolt\\models\\types\\timestamp","bolt\/models\/types\/timestamp.html#method_getSqlDeclaration","(array $fieldDeclaration, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["timestamp::convertToPHPValue","bolt\\models\\types\\timestamp","bolt\/models\/types\/timestamp.html#method_convertToPHPValue","($value, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["timestamp::convertToDatabaseValue","bolt\\models\\types\\timestamp","bolt\/models\/types\/timestamp.html#method_convertToDatabaseValue","($value, <abbr title=\"Doctrine\\DBAL\\Platforms\\AbstractPlatform\">AbstractPlatform<\/abbr> $platform)","",2],["timestamp::getName","bolt\\models\\types\\timestamp","bolt\/models\/types\/timestamp.html#method_getName","()","",2],["plugin::plug","bolt\\plugin","bolt\/plugin.html#method_plug","(string $name, string|<abbr title=\"bolt\\callback\">callback<\/abbr> $class = null, array $config = array())","plug a new class into this parent class",2],["plugin::getPlugins","bolt\\plugin","bolt\/plugin.html#method_getPlugins","()","return all plugins",2],["plugin::pluginExists","bolt\\plugin","bolt\/plugin.html#method_pluginExists","(string $name, <abbr title=\"bolt\\Closure\">Closure<\/abbr> $cb = null)","does plugin exist",2],["plugin::plugin","bolt\\plugin","bolt\/plugin.html#method_plugin","(string $name)","get a plugin instance",2],["plugin::unplug","bolt\\plugin","bolt\/plugin.html#method_unplug","(string $name)","unplug a plugin",2],["plugin::offsetSet","bolt\\plugin","bolt\/plugin.html#method_offsetSet","(string $name, string $class)","set offset",2],["plugin::offsetExists","bolt\\plugin","bolt\/plugin.html#method_offsetExists","(string $name)","offset get",2],["plugin::offsetUnset","bolt\\plugin","bolt\/plugin.html#method_offsetUnset","(string $name)","unplug",2],["plugin::offsetGet","bolt\\plugin","bolt\/plugin.html#method_offsetGet","(string $name)","get a plugin",2],["factory::factory","bolt\\plugin\\factory","bolt\/plugin\/factory.html#method_factory","($parent, $config = array())","factory function interface",2],["render::__construct","bolt\\render","bolt\/render.html#method___construct","(<a href=\"bolt\/application.html\"><abbr title=\"bolt\\application\">application<\/abbr><\/a> $app)","Constructor",2],["render::engine","bolt\\render","bolt\/render.html#method_engine","(string $ext, string $class)","register a new engine",2],["render::hasEngine","bolt\\render","bolt\/render.html#method_hasEngine","(string $ext, boolean $mustCompile = null)","is there an engine available for the provided file",2],["render::getEngines","bolt\\render","bolt\/render.html#method_getEngines","()","return all registered engines",2],["render::getEngine","bolt\\render","bolt\/render.html#method_getEngine","(string $ext)","get an engine for the provided file extension",2],["render::getEngineInstance","bolt\\render","bolt\/render.html#method_getEngineInstance","($class, $config = array())","",2],["render::string","bolt\\render","bolt\/render.html#method_string","(string $ext, string $str, array $vars = array())","render a string using the provided renderer",2],["render::file","bolt\\render","bolt\/render.html#method_file","(string $file, array $vars = array())","render a file",2],["base::canCompile","bolt\\render\\base","bolt\/render\/base.html#method_canCompile","()","can this renderer compile a view",2],["base::__construct","bolt\\render\\base","bolt\/render\/base.html#method___construct","(<abbr title=\"bolt\\render\\bolt\\render\">render<\/abbr> $manager, $config = array())","Constructor (can not be overloaded)",2],["base::render","bolt\\render\\base","bolt\/render\/base.html#method_render","(string $str, array $vars = array())","render abstract",2],["base::renderFile","bolt\\render\\base","bolt\/render\/base.html#method_renderFile","(string $file, array $vars = array())","render a file",2],["base::renderCompiled","bolt\\render\\base","bolt\/render\/base.html#method_renderCompiled","(mixed $compiled, array $vars = array())","render a compiled vide",2],["dom::compile","bolt\\render\\dom","bolt\/render\/dom.html#method_compile","($str)","compile the dom doc to serializeable object",2],["dom::render","bolt\\render\\dom","bolt\/render\/dom.html#method_render","(string $str, array $vars = array())","render an html string into a dom doc",2],["dom::renderCompiled","bolt\\render\\dom","bolt\/render\/dom.html#method_renderCompiled","(mixed $compiled, array $vars = array())","render a compiled string",2],["handlebars::canCompile","bolt\\render\\handlebars","bolt\/render\/handlebars.html#method_canCompile","()","",2],["handlebars::getDelimiters","bolt\\render\\handlebars","bolt\/render\/handlebars.html#method_getDelimiters","()","",2],["handlebars::compile","bolt\\render\\handlebars","bolt\/render\/handlebars.html#method_compile","($str)","compile to freezable class",2],["handlebars::render","bolt\\render\\handlebars","bolt\/render\/handlebars.html#method_render","(string $str, array $vars = array())","render a handlebar template",2],["handlebars::renderCompiled","bolt\\render\\handlebars","bolt\/render\/handlebars.html#method_renderCompiled","(array $compiled, array $vars = array())","render a compiled template",2],["renderInterface::canCompile","bolt\\render\\renderInterface","bolt\/render\/renderInterface.html#method_canCompile","()","determine whether this renderer  can compile views",2],["renderInterface::render","bolt\\render\\renderInterface","bolt\/render\/renderInterface.html#method_render","(string $str, array $vars)","render the provided string",2],["xml::render","bolt\\render\\xml","bolt\/render\/xml.html#method_render","(string $data, array $vars = array())","render abstract",2],["generate::__construct","bolt\\render\\xml\\generate","bolt\/render\/xml\/generate.html#method___construct","($data)","",2],["generate::getData","bolt\\render\\xml\\generate","bolt\/render\/xml\/generate.html#method_getData","()","",2],["generate::render","bolt\\render\\xml\\generate","bolt\/render\/xml\/generate.html#method_render","()","",2],["generate::__toString","bolt\\render\\xml\\generate","bolt\/render\/xml\/generate.html#method___toString","()","",2],["curl::__construct","bolt\\source\\curl","bolt\/source\/curl.html#method___construct","(<abbr title=\"bolt\\source\\bolt\\application\">application<\/abbr> $app, array $config = array())","Constructor",2],["curl::getApp","bolt\\source\\curl","bolt\/source\/curl.html#method_getApp","()","",2],["curl::getClient","bolt\\source\\curl","bolt\/source\/curl.html#method_getClient","()","return guzzle client",2],["curl::getModelEntityManager","bolt\\source\\curl","bolt\/source\/curl.html#method_getModelEntityManager","(<abbr title=\"bolt\\source\\bolt\\models\">models<\/abbr> $manager, <abbr title=\"bolt\\source\\bolt\\models\\driver\">driver<\/abbr> $driver)","return the entity manager",2],["curl::getRepository","bolt\\source\\curl","bolt\/source\/curl.html#method_getRepository","(string $entity)","get a repository for a given entity class",2],["curl::persist","bolt\\source\\curl","bolt\/source\/curl.html#method_persist","(<abbr title=\"bolt\\source\\bolt\\models\\entity\">entity<\/abbr> $entity)","persist",2],["curl::__call","bolt\\source\\curl","bolt\/source\/curl.html#method___call","(string $name, array $args)","magic call to send any undefined methods to $_client",2],["repository::__construct","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method___construct","(<abbr title=\"bolt\\source\\curl\\bolt\\source\\curl\">curl<\/abbr> $curl, $entity, <abbr title=\"bolt\\source\\curl\\bolt\\models\">models<\/abbr> $manager, <abbr title=\"bolt\\source\\curl\\bolt\\models\\driver\">driver<\/abbr> $driver)","Constructor",2],["repository::getRequestUri","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_getRequestUri","(string $type, array $args)","generate a request url form $entity::curl or using",2],["repository::getTransform","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_getTransform","(string $type, array $data)","transform the curl response to an item array",2],["repository::generateEntity","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_generateEntity","(array $item)","generate a class of $entity from the provided data",2],["repository::find","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_find","(mixed $id)","find an entity",2],["repository::findBy","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_findBy","($query, $order = array(), $limit = false, $offset, $total)","find an entity by query",2],["repository::findOneBy","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_findOneBy","(array $query, array $order = array())","find one entity by query",2],["repository::persist","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_persist","(<abbr title=\"bolt\\source\\curl\\bolt\\models\\entity\">entity<\/abbr> $entity)","persist",2],["repository::flush","bolt\\source\\curl\\repository","bolt\/source\/curl\/repository.html#method_flush","()","",2],["database::__construct","bolt\\source\\database","bolt\/source\/database.html#method___construct","(<abbr title=\"bolt\\source\\bolt\\application\">application<\/abbr> $app, array $config = array())","Constructor",2],["database::getHandle","bolt\\source\\database","bolt\/source\/database.html#method_getHandle","()","return the DABL handle",2],["database::getConfig","bolt\\source\\database","bolt\/source\/database.html#method_getConfig","()","return the configuration",2],["database::getModelEntityManager","bolt\\source\\database","bolt\/source\/database.html#method_getModelEntityManager","(<abbr title=\"bolt\\source\\bolt\\models\">models<\/abbr> $manager, <abbr title=\"bolt\\source\\bolt\\models\\driver\">driver<\/abbr> $driver)","get the doctrine entity manager",2],["database::__call","bolt\\source\\database","bolt\/source\/database.html#method___call","(string $name, array $args)","magic method to pass any calls  to DABL handler",2],["event::__construct","bolt\\source\\event","bolt\/source\/event.html#method___construct","(<abbr title=\"bolt\\source\\bolt\\models\">models<\/abbr> $manager)","Constructor",2],["event::postLoad","bolt\\source\\event","bolt\/source\/event.html#method_postLoad","(<abbr title=\"bolt\\source\\Doctrine\\Common\\Event\">Event<\/abbr> $e)","postLoad event callback",2],["event::getSubscribedEvents","bolt\\source\\event","bolt\/source\/event.html#method_getSubscribedEvents","()","list of events this subscriber can handle",2],["mongodb::__construct","bolt\\source\\mongodb","bolt\/source\/mongodb.html#method___construct","(<abbr title=\"bolt\\source\\bolt\\application\">application<\/abbr> $app, $config = array())","",2],["mongodb::getHandle","bolt\\source\\mongodb","bolt\/source\/mongodb.html#method_getHandle","()","",2],["mongodb::getModelEntityManager","bolt\\source\\mongodb","bolt\/source\/mongodb.html#method_getModelEntityManager","(<abbr title=\"bolt\\source\\bolt\\models\">models<\/abbr> $manager, <abbr title=\"bolt\\source\\bolt\\models\\driver\">driver<\/abbr> $driver)","",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']